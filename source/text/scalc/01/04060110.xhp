<?xml version="1.0" encoding="UTF-8"?>
<helpdocument version="1.0">
<!--
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
-->

<meta>
  <topic id="textscalc0104060110xml" indexer="include">
    <title id="tit">Text Functions</title>
    <filename>/text/scalc/01/04060110.xhp</filename>
  </topic>
</meta>

<body>

<bookmark branch="index" id="bm_id3145389">
  <bookmark_value>text in cells; functions</bookmark_value>
  <bookmark_value>functions; text functions</bookmark_value>
  <bookmark_value>Function Wizard;text</bookmark_value>
</bookmark>


<h1 id="hd_id3145389"><variable id="head_text"><link href="text/scalc/01/04060110.xhp">Text Functions</link></variable></h1>
<paragraph id="par_id3152986" role="paragraph"><variable id="texttext">This section contains descriptions of the <emph>Text</emph> functions. </variable></paragraph>

<section id="howtoget">
<embed href="text/scalc/00/00000404.xhp#eikatext"/>
</section>

<section id="double_quotation_marks_in_formulas">
<bookmark branch="index" id="bm_id331624453577057">
  <bookmark_value>using double quotation marks in formulas</bookmark_value>
  <bookmark_value>formulas; using double quotation marks</bookmark_value>
</bookmark>

<h2 id="hd_id291624454173529">Using double quotation marks in formulas</h2>

<paragraph role="paragraph" id="par_id891624454058773">To include a text string in a formula, place the text string between two double quotation marks (") and Calc takes the characters in the string without attempting to interpret them. For example, the formula <input>="Hello world!"</input> displays the text string <literal>Hello world!</literal> in the cell, with no surrounding double quotation marks.</paragraph>

<paragraph role="paragraph" id="par_id461624454425320">The more complex formula <input>=CONCATENATE("Life is really simple, "; "but we insist on making it complicated "; "(Confucius).")</input> concatenates three individual strings in double quotation marks, outputting <literal>Life is really simple, but we insist on making it complicated (Confucius).</literal></paragraph>

<paragraph role="paragraph" id="par_id711624454477483">To place a literal double quotation mark within a string inside a formula, two methods can be used:</paragraph>

<list type="ordered">
    <listitem>
        <paragraph id="par_id541624454496424" role="listitem">You can "escape" the double quotation mark with an additional double quotation mark, and Calc treats the escaped double quotation mark as a literal value. For example, the formula <input>="My name is ""John Doe""."</input> outputs the string <literal>My name is "John Doe".</literal> Another simple example is the formula <input>=UNICODE("""")</input> which returns <literal>34</literal>, the decimal value of the Unicode quotation mark character (U+0022) — here the first and fourth double quotation marks indicate the beginning and end of the string, while the second double quotation mark escapes the third.</paragraph>
    </listitem>
    <listitem>
        <paragraph id="par_id21624454513641" role="listitem">You can use the CHAR function or the UNICHAR function to insert a double quotation mark. For example, the formula <input>=UNICHAR(34) &amp; "The Catcher in the Rye" &amp; UNICHAR(34) &amp; " is a famous book by J. D. Salinger."</input> displays the string <literal>"The Catcher in the Rye" is a famous book by J. D. Salinger.</literal></paragraph>
    </listitem>
</list>

<paragraph role="paragraph" id="par_id401624454547945">Be aware that Calc's AutoCorrect function may modify double quotation marks. AutoCorrect should not change the double quotation marks within formula cells but may change those used in non-formula cells containing text. For example, if you copy a string that is surrounded by some other form of typographical double quotation marks, such as the left double quotation mark (U+201C) and the right double quotation mark (U+201D), and then paste into a formula cell, an error may result. Open the <emph>Double Quotes</emph> area of the <menuitem>Tools - AutoCorrect Options - Localized Options</menuitem> dialog to set the characters used to automatically correct the start and end typographical double quotation marks. Uncheck the <menuitem>Replace</menuitem> toggle button to disable the feature.</paragraph>

</section>
<h2 id="hd_id451721571883016">Empty string and blank cells</h2>
<paragraph role="paragraph" id="par_id241721571890240"><variable id="stringblank">Cells with the empty string ("") are not equivalent to blank cells. When searching or calculating with text, the empty string "" is the text with length zero.</variable></paragraph>
<paragraph role="paragraph" id="par_id451721571895265">For example, when the formula in A1 returns the empty string "", the following applies:</paragraph>
<paragraph role="paragraph" id="par_id591721571900225"><input>=ISBLANK(A1)</input> returns FALSE. The cell is not blank.</paragraph>
<paragraph role="paragraph" id="par_id781721571904769"><input>=ISFORMULA(A1)</input> returns TRUE. The cell is a formula.</paragraph>
<paragraph role="paragraph" id="par_id671721571909081"><input>=ISLOGICAL(A1)</input> returns FALSE. Not a logical value.
</paragraph>
<paragraph role="paragraph" id="par_id791721571916704"><input>=ISNONTEXT(A1)</input> returns FALSE. The cell has the empty string.</paragraph>
<paragraph role="paragraph" id="par_id91721571920288"><input>=ISNUMBER(A1)</input> returns FALSE. Not a number.</paragraph>
<paragraph role="paragraph" id="par_id821721571924250"><input>=ISTEXT(A1)</input> returns TRUE. The cell has the empty string, calculated by a formula.</paragraph>
<paragraph role="paragraph" id="par_id71721571927654"><input>=LEN(A1)</input> returns 0. The length of the empty string is 0.</paragraph>


<sort order="asc" descendant="h2">

<section id="arabic">
  <embed href="text/scalc/01/func_arabic.xhp#func_arabic"/>
</section>

<section id="asc">
  <embed href="text/scalc/01/func_asc.xhp#func_asc"/>
</section>

<section id="bahttext">
  <embed href="text/scalc/01/func_bahttext.xhp#func_bahttext"/>
</section>

<section id="base">
  <embed href="text/scalc/01/func_base.xhp#func_base"/>
</section>

<section id="char"><embed href="text/scalc/01/func_char.xhp#func_char"/></section>

<section id="clean"><embed href="text/scalc/01/func_clean.xhp#func_clean"/></section>

<section id="code"><embed href="text/scalc/01/func_code.xhp#func_code"/></section>

<section id="concatenate"><embed href="text/scalc/01/func_concatenate.xhp#func_concatenate"/></section>

<section id="decimal"><embed href="text/scalc/01/func_decimal.xhp#func_decimal"/></section>

<section id="dollar"><embed href="text/scalc/01/func_dollar.xhp#func_dollar"/></section>

<section id="exact"><embed href="text/scalc/01/func_exact.xhp#func_exact"/></section>

<section id="find"><embed href="text/scalc/01/func_find.xhp#func_find"/></section>

<section id="fixed"><embed href="text/scalc/01/func_fixed.xhp#func_fixed"/></section>

<section id="jis">
  <embed href="text/scalc/01/func_jis.xhp#func_jis"/>
</section>

<section id="left"><embed href="text/scalc/01/func_left.xhp#func_left"/></section>

<section id="leftb">
<bookmark branch="index" id="bm_id2947083">
  <bookmark_value>LEFTB function</bookmark_value>
</bookmark>

<bookmark branch="hid/SC_HID_FUNC_LEFTB" id="bm_id2954645" localize="false"/>

<h2 id="hd_id2947083"><variable id="leftbvar"><link href="text/scalc/01/04060110.xhp#leftb">LEFTB</link></variable></h2>
<paragraph id="par_id2953622" role="paragraph"><ahelp hid="HID_FUNC_LEFTB">Returns the first characters of a DBCS text.</ahelp></paragraph>
<embed href="text/scalc/00/avail_release.xhp#4.2"/>
<embed href="text/scalc/01/common_func.xhp#sectionsyntax"/>
<paragraph id="par_id2946786" role="code">LEFTB("Text" [; Number_bytes])</paragraph>
<paragraph id="par_id2947274" role="paragraph"><emph>Text</emph> is the text where the initial partial words are to be determined.</paragraph>
<paragraph id="par_id2953152" role="paragraph"><emph>Number_bytes</emph> (optional) specifies the number of characters you want LEFTB to extract, based on bytes. If this parameter is not defined, one character is returned.</paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionexample"/>
<paragraph id="par_id2949141" role="paragraph"><item type="input">=LEFTB("中国";1)</item> returns " " (1 byte is only half a DBCS character and a space character is returned instead).</paragraph>
<paragraph id="par_id2949151" role="paragraph"><item type="input">=LEFTB("中国";2)</item> returns "中" (2 bytes constitute one complete DBCS character).</paragraph>
<paragraph id="par_id2949161" role="paragraph"><item type="input">=LEFTB("中国";3)</item> returns "中 " (3 bytes constitute one DBCS character and a half; the last character returned is therefore a space character).</paragraph>
<paragraph id="par_id2949171" role="paragraph"><item type="input">=LEFTB("中国";4)</item> returns "中国" (4 bytes constitute two complete DBCS characters).</paragraph>
<paragraph id="par_id2949181" role="paragraph"><item type="input">=LEFTB("office";3)</item> returns "off" (3 non-DBCS characters each consisting of 1 byte).</paragraph>
</section>

<section id="len"><embed href="text/scalc/01/func_len.xhp#func_len"/></section>

<section id="lenb">
<bookmark branch="index" id="bm_id2956110">
  <bookmark_value>LENB function</bookmark_value>
</bookmark>

<bookmark branch="hid/SC_HID_FUNC_LENB" id="bm_id2954050" localize="false"/>

<h2 id="hd_id2956110"><variable id="lenbvar"><link href="text/scalc/01/04060110.xhp#lenb">LENB</link></variable></h2>
<paragraph id="par_id2950147" role="paragraph"><ahelp hid="HID_FUNC_LENB">For double-byte character set (DBCS) languages, returns the number of bytes used to represent the characters in a text string.</ahelp></paragraph>
<embed href="text/scalc/00/avail_release.xhp#4.2"/>
<embed href="text/scalc/01/common_func.xhp#sectionsyntax"/>
<paragraph id="par_id2954063" role="code">LENB("Text")</paragraph>
<paragraph id="par_id2946894" role="paragraph"><emph>Text</emph> is the text whose length is to be determined.</paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionexample"/>
<paragraph id="par_id2956018" role="paragraph"><item type="input">LENB("中")</item> returns 2 (1 DBCS character consisting of 2 bytes).</paragraph>
<paragraph id="par_id2956028" role="paragraph"><item type="input">LENB("中国")</item> returns 4 (2 DBCS characters each consisting of 2 bytes).</paragraph>
<paragraph id="par_id2956038" role="paragraph"><item type="input">LENB("office")</item> returns 6 (6 non-DBCS characters each consisting of 1 byte).</paragraph>
<paragraph id="par_id2956008" role="paragraph"> <item type="input">=LENB("Good Afternoon")</item> returns 14.</paragraph>
<paragraph id="par_id2954300" role="paragraph"> <item type="input">=LENB(12345.67)</item> returns 8.</paragraph>
</section>

<section id="lower"><embed href="text/scalc/01/func_lower.xhp#func_lower"/></section>

<section id="mid">
<bookmark branch="index" id="bm_id3154589">
  <bookmark_value>MID function</bookmark_value>
</bookmark>

<bookmark branch="hid/SC_HID_FUNC_TEIL" id="bm_id3155392" localize="false"/>

<h2 id="hd_id3154589">MID</h2>
<paragraph id="par_id3154938" role="paragraph"><ahelp hid="HID_FUNC_TEIL">Returns a text string of a text. The parameters specify the starting position and the number of characters.</ahelp></paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionsyntax"/>
<paragraph id="par_id3150526" role="code">MID("Text"; Start; Number)</paragraph>
<paragraph id="par_id3148820" role="paragraph"> <emph>Text</emph> is the text containing the characters to extract.</paragraph>
<paragraph id="par_id3150774" role="paragraph"> <emph>Start</emph> is the position of the first character in the text to extract.</paragraph>
<paragraph id="par_id3153063" role="paragraph"> <emph>Number</emph> specifies the number of characters in the part of the text.</paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionexample"/>
<paragraph id="par_id3158407" role="paragraph"> <item type="input">=MID("office";2;2)</item> returns ff.</paragraph>
</section>

<section id="midb">
<bookmark branch="index" id="bm_id2954589">
  <bookmark_value>MIDB function</bookmark_value>
</bookmark>

<bookmark branch="hid/SC_HID_FUNC_MIDB" id="bm_id2955392" localize="false"/>

<h2 id="hd_id2954589"><variable id="midbvar"><link href="text/scalc/01/04060110.xhp#midb">MIDB</link></variable></h2>
<paragraph id="par_id2954938" role="paragraph"><ahelp hid="HID_FUNC_MIDB">Returns a text string of a DBCS text. The parameters specify the starting position and the number of characters.</ahelp></paragraph>
<embed href="text/scalc/00/avail_release.xhp#4.2"/>
<embed href="text/scalc/01/common_func.xhp#sectionsyntax"/>
<paragraph id="par_id2950526" role="code">MIDB("Text"; Start; Number_bytes)</paragraph>
<paragraph id="par_id2948820" role="paragraph"><emph>Text</emph> is the text containing the characters to extract.</paragraph>
<paragraph id="par_id2950774" role="paragraph"><emph>Start</emph> is the position of the first character in the text to extract.</paragraph>
<paragraph id="par_id2953063" role="paragraph"><emph>Number_bytes</emph> specifies the number of characters MIDB will return from text, in bytes.</paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionexample"/>
<paragraph id="par_id2958417" role="paragraph"><item type="input">=MIDB("中国";1;0)</item> returns "" (0 bytes is always an empty string).</paragraph>
<paragraph id="par_id2958427" role="paragraph"><item type="input">=MIDB("中国";1;1)</item> returns " " (1 byte is only half a DBCS character and therefore the result is a space character).</paragraph>
<paragraph id="par_id2958437" role="paragraph"><item type="input">=MIDB("中国";1;2)</item> returns "中" (2 bytes constitute one complete DBCS character).</paragraph>
<paragraph id="par_id2958447" role="paragraph"><item type="input">=MIDB("中国";1;3)</item> returns "中 " (3 bytes constitute one and a half DBCS character; the last byte results in a space character).</paragraph>
<paragraph id="par_id2958457" role="paragraph"><item type="input">=MIDB("中国";1;4)</item> returns "中国" (4 bytes constitute two complete DBCS characters).</paragraph>
<paragraph id="par_id2958467" role="paragraph"><item type="input">=MIDB("中国";2;1)</item> returns " " (byte position 2 is not at the beginning of a character in a DBCS string; 1 space character is returned).</paragraph>
<paragraph id="par_id2958477" role="paragraph"><item type="input">=MIDB("中国";2;2)</item> returns " " (byte position 2 points to the last half of the first character in the DBCS string; the 2 bytes asked for therefore constitutes the last half of the first character and the first half of the second character in the string; 2 space characters are therefore returned).</paragraph>
<paragraph id="par_id2958487" role="paragraph"><item type="input">=MIDB("中国";2;3)</item> returns " 国" (byte position 2 is not at the beginning of a character in a DBCS string; a space character is returned for byte position 2).</paragraph>
<paragraph id="par_id2958497" role="paragraph"><item type="input">=MIDB("中国";3;1)</item> returns " " (byte position 3 is at the beginning of a character in a DBCS string, but 1 byte is only half a DBCS character and a space character is therefore returned instead).</paragraph>
<paragraph id="par_id2958507" role="paragraph"><item type="input">=MIDB("中国";3;2)</item> returns "国" (byte position 3 is at the beginning of a character in a DBCS string, and 2 bytes constitute one DBCS character).</paragraph>
<paragraph id="par_id2958517" role="paragraph"><item type="input">=MIDB("office";2;3)</item> returns "ffi" (byte position 2 is at the beginning of a character in a non-DBCS string, and 3 bytes of a non-DBCS string constitute 3 characters).</paragraph>
</section>

<section id="proper">
<bookmark branch="index" id="bm_id3159143">
  <bookmark_value>PROPER function</bookmark_value>
</bookmark>

<bookmark branch="hid/SC_HID_FUNC_GROSS2" id="bm_id3154897" localize="false"/>

<h2 id="hd_id3159143">PROPER</h2>
<paragraph id="par_id3149768" role="paragraph"><ahelp hid="HID_FUNC_GROSS2">Capitalizes the first letter in all words of a text string.</ahelp></paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionsyntax"/>
<paragraph id="par_id3154260" role="code">PROPER("Text")</paragraph>
<paragraph id="par_id3147509" role="paragraph"> <emph>Text</emph> refers to the text to be converted.</paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionexample"/>
<paragraph id="par_id3155364" role="paragraph"> <item type="input">=PROPER("the document foundation")</item> returns The Document Foundation.</paragraph>
</section>

<section id="regex">
<embed href="text/scalc/01/func_regex.xhp#func_regex"/>
</section>

<section id="replace">
<bookmark branch="index" id="bm_id3149171">
  <bookmark_value>REPLACE function</bookmark_value>
</bookmark>

<bookmark branch="hid/SC_HID_FUNC_ERSETZEN" id="bm_id3149990" localize="false"/>

<h2 id="hd_id3149171">REPLACE</h2>
<paragraph id="par_id3148925" role="paragraph"><ahelp hid="HID_FUNC_ERSETZEN">Replaces part of a text string with a different text string.</ahelp> This function can be used to replace both characters and numbers (which are automatically converted to text). The result of the function is always displayed as text. If you intend to perform further calculations with a number which has been replaced by text, you will need to convert it back to a number using the <link href="text/scalc/01/04060110.xhp">VALUE</link> function.</paragraph>
<paragraph id="par_id3158426" role="paragraph">Any text containing numbers must be enclosed in quotation marks if you do not want it to be interpreted as a number and automatically converted to text.</paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionsyntax"/>
<paragraph id="par_id3147286" role="code">REPLACE("Text"; Position; Length; "NewText")</paragraph>
<paragraph id="par_id3149797" role="paragraph"> <emph>Text</emph> refers to text of which a part will be replaced.</paragraph>
<paragraph id="par_id3166451" role="paragraph"> <emph>Position</emph> refers to the position within the text where the replacement will begin.</paragraph>
<paragraph id="par_id3156040" role="paragraph"> <emph>Length</emph> is the number of characters in <emph>Text</emph> to be replaced.</paragraph>
<paragraph id="par_id3159188" role="paragraph"> <emph>NewText</emph> refers to the text which replaces <emph>Text</emph>.</paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionexample"/>
<paragraph id="par_id3154096" role="paragraph"> <item type="input">=REPLACE("1234567";1;1;"444")</item> returns "444234567". One character at position 1 is replaced by the complete <item type="literal">NewText</item>.</paragraph>
</section>

<section id="rept">
<bookmark branch="index" id="bm_id3149741">
  <bookmark_value>REPT function</bookmark_value>
</bookmark>

<bookmark branch="hid/SC_HID_FUNC_WIEDERHOLEN" id="bm_id3155582" localize="false"/>

<h2 id="hd_id3149741">REPT</h2>
<paragraph id="par_id3153748" role="paragraph"><ahelp hid="HID_FUNC_WIEDERHOLEN">Repeats a character string by the given <emph>number</emph> of copies.</ahelp></paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionsyntax"/>
<paragraph id="par_id3150494" role="code">REPT("Text"; Number)</paragraph>
<paragraph id="par_id3154859" role="paragraph"> <emph>Text</emph> is the text to be repeated.</paragraph>
<paragraph id="par_id3150638" role="paragraph"> <emph>Number</emph> is the number of repetitions.</paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionexample"/>
<paragraph id="par_id3148626" role="paragraph"> <item type="input">=REPT("Good morning";2)</item> returns Good morningGood morning.</paragraph>

<tip id="par_id381626381556310">Refer to the <link href="https://wiki.documentfoundation.org/Documentation/Calc_Functions/REPT">REPT</link> wiki page for more details about this function.</tip></section>

<section id="right">
<bookmark branch="index" id="bm_id3149805">
  <bookmark_value>RIGHT function</bookmark_value>
</bookmark>

<bookmark branch="hid/SC_HID_FUNC_RECHTS" id="bm_id3154602" localize="false"/>

<h2 id="hd_id3149805">RIGHT</h2>
<paragraph id="par_id3145375" role="paragraph"><ahelp hid="HID_FUNC_RECHTS">Returns the last character or characters of a text.</ahelp></paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionsyntax"/>
<paragraph id="par_id3154344" role="code">RIGHT("Text" [; Number])</paragraph>
<paragraph id="par_id3149426" role="paragraph"> <emph>Text</emph> is the text of which the right part is to be determined.</paragraph>
<paragraph id="par_id3153350" role="paragraph"> <emph>Number</emph> (optional) is the number of characters from the right part of the text. If this parameter is not defined, one character is returned.</paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionexample"/>
<paragraph id="par_id3151132" role="paragraph"> <item type="input">=RIGHT("Sun";2)</item> returns un.</paragraph>
</section>

<section id="rightb">
<bookmark branch="index" id="bm_id2949805">
  <bookmark_value>RIGHTB function</bookmark_value>
</bookmark>

<bookmark branch="hid/SC_HID_FUNC_RIGHTB" id="bm_id2954602" localize="false"/>

<h2 id="hd_id2949805"><variable id="rightbvar"><link href="text/scalc/01/04060110.xhp#rightb">RIGHTB</link></variable></h2>
<paragraph id="par_id2945375" role="paragraph"><ahelp hid="HID_FUNC_RIGHTB">Returns the last character or characters of a text with double bytes characters sets (DBCS).</ahelp></paragraph>
<embed href="text/scalc/00/avail_release.xhp#4.2"/>
<embed href="text/scalc/01/common_func.xhp#sectionsyntax"/>
<paragraph id="par_id2954344" role="code">RIGHTB("Text" [; Number_bytes])</paragraph>
<paragraph id="par_id2949426" role="paragraph"><emph>Text</emph> is the text of which the right part is to be determined.</paragraph>
<paragraph id="par_id2953350" role="paragraph"><emph>Number_bytes</emph> (optional) specifies the number of characters you want RIGHTB to extract, based on bytes. If this parameter is not defined, one byte is returned.</paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionexample"/>
<paragraph id="par_id2951132" role="paragraph"><item type="input">RIGHTB("中国";1)</item> returns " " (1 byte is only half a DBCS character and a space character is returned instead).</paragraph>
<paragraph id="par_id2951142" role="paragraph"><item type="input">RIGHTB("中国";2)</item> returns "国" (2 bytes constitute one complete DBCS character).</paragraph>
<paragraph id="par_id2951152" role="paragraph"><item type="input">RIGHTB("中国";3)</item> returns " 国" (3 bytes constitute one half DBCS character and one whole DBCS character; a space is returned for the first half).</paragraph>
<paragraph id="par_id2951162" role="paragraph"><item type="input">RIGHTB("中国";4)</item> returns "中国" (4 bytes constitute two complete DBCS characters).</paragraph>
<paragraph id="par_id2951172" role="paragraph"><item type="input">RIGHTB("office";3)</item> returns "ice" (3 non-DBCS characters each consisting of 1 byte).</paragraph>
</section>

<section id="roman">
  <embed href="text/scalc/01/func_roman.xhp#func_roman"/>
</section>

<section id="search">
<bookmark branch="index" id="bm_id3151005">
  <bookmark_value>SEARCH function</bookmark_value>
</bookmark>

<bookmark branch="hid/SC_HID_FUNC_SUCHEN" id="bm_id3149484" localize="false"/>

<h2 id="hd_id3151005">SEARCH</h2>
<paragraph id="par_id3148692" role="paragraph"><ahelp hid="HID_FUNC_SUCHEN">Returns the position of a text segment within a character string.</ahelp> You can set the start of the search as an option. The search text can be a number or any sequence of characters. The search is not case-sensitive. If the text is not found, returns error 519 (#VALUE).</paragraph>
<embed href="text/shared/00/00000001.xhp#regex"/>
<embed href="text/scalc/01/common_func.xhp#sectionsyntax"/>
<paragraph id="par_id3154671" role="code">SEARCH("FindText"; "Text" [; Position])</paragraph>
<paragraph id="par_id3146080" role="paragraph"> <emph>FindText</emph> is the text to be searched for.</paragraph>
<paragraph id="par_id3154111" role="paragraph"> <emph>Text</emph> is the text where the search will take place.</paragraph>
<paragraph id="par_id3149559" role="paragraph"> <emph>Position</emph> (optional) is the position in the text where the search is to start.</paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionexample"/>
<paragraph id="par_id3154564" role="paragraph"> <item type="input">=SEARCH(54;998877665544)</item> returns 10.</paragraph>
</section>

<section id="substitute">
<bookmark branch="index" id="bm_id3154830">
  <bookmark_value>SUBSTITUTE function</bookmark_value>
</bookmark>

<bookmark branch="hid/SC_HID_FUNC_WECHSELN" id="bm_id3147090" localize="false"/>

<h2 id="hd_id3154830">SUBSTITUTE</h2>
<paragraph id="par_id3153698" role="paragraph"><ahelp hid="HID_FUNC_WECHSELN">Substitutes new text for old text in a string.</ahelp></paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionsyntax"/>
<paragraph id="par_id3147582" role="code">SUBSTITUTE("Text"; "SearchText"; "NewText" [; Occurrence])</paragraph>
<paragraph id="par_id3153675" role="paragraph"> <emph>Text</emph> is the text in which text segments are to be exchanged.</paragraph>
<paragraph id="par_id3156155" role="paragraph"> <emph>SearchText </emph>is the text segment that is to be replaced (a number of times).</paragraph>
<paragraph id="par_id3145779" role="paragraph"> <emph>NewText</emph> is the text that is to replace the text segment.</paragraph>
<paragraph id="par_id3150348" role="paragraph"> <emph>Occurrence</emph> (optional) indicates which occurrence of the search text is to be replaced. If this parameter is missing the search text is replaced throughout.</paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionexample"/>
<paragraph id="par_id3150412" role="paragraph"> <item type="input">=SUBSTITUTE("123123123";"3";"abc")</item> returns 12abc12abc12abc.</paragraph>
<paragraph id="par_id3154915" role="paragraph"> <item type="input">=SUBSTITUTE("123123123";"3";"abc";2)</item> returns 12312abc123.</paragraph>
</section>

<section id="t">
<bookmark branch="index" id="bm_id3148977">
  <bookmark_value>T function</bookmark_value>
</bookmark>

<bookmark branch="hid/SC_HID_FUNC_T" id="bm_id3156051" localize="false"/>

<h2 id="hd_id3148977">T</h2>
<paragraph id="par_id3154359" role="paragraph"><ahelp hid="HID_FUNC_T">This function returns the target text, or a blank text string if the target is not text.</ahelp></paragraph>
<paragraph id="par_id9115573" role="paragraph">If an error occurs the function returns the error value.</paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionsyntax"/>
<paragraph id="par_id3155871" role="code">T(Value)</paragraph>
<paragraph id="par_id3154726" role="paragraph">If <emph>Value</emph> is a text string or refers to a text string, T returns that text string; otherwise it returns a blank text string.</paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionexample"/>
<paragraph id="par_id3151062" role="paragraph"> <item type="input">=T(12345)</item> returns an empty string. </paragraph>
<paragraph id="par_id4650105" role="paragraph"> <item type="input">=T("12345")</item> returns the string 12345.</paragraph>
</section>

<section id="text">
<bookmark branch="index" id="bm_id3147132">
  <bookmark_value>TEXT function</bookmark_value>
</bookmark>

<bookmark branch="hid/SC_HID_FUNC_TEXT" id="bm_id3156426" localize="false"/>

<h2 id="hd_id3147132">TEXT</h2>
<paragraph id="par_id3147213" role="paragraph"><ahelp hid="HID_FUNC_TEXT">Converts a value into text according to a given format.</ahelp></paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionsyntax"/>
<paragraph id="par_id3147377" role="code">TEXT(Value; Format)</paragraph>
<paragraph id="par_id3147389" role="paragraph"> <emph>Value</emph> is the value (numerical or textual) to be converted.</paragraph>
<paragraph id="par_id3156167" role="paragraph"> <emph>Format</emph> is the text which defines the format. Use decimal and thousands separators according to the language set in the cell format.</paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionexample"/>
<paragraph id="par_id9044770" role="paragraph"> <item type="input">=TEXT(12.34567;"###.##")</item> returns the text 12.35</paragraph>
<paragraph id="par_id3674123" role="paragraph"> <item type="input">=TEXT(12.34567;"000.00")</item> returns the text 012.35</paragraph>
<paragraph id="par_id3674124" role="paragraph"> <item type="input">=TEXT("xyz";"=== @ ===")</item> returns the text === xyz ===</paragraph>

<tip id="par_id3145364">See also <link href="text/shared/01/05020301.xhp">Number format codes</link>: custom format codes defined by the user.</tip>
</section>

<section id="trim">
<bookmark branch="index" id="bm_id3151039">
  <bookmark_value>TRIM function</bookmark_value>
</bookmark>

<bookmark branch="hid/SC_HID_FUNC_GLAETTEN" id="bm_id3150584" localize="false"/>

<h2 id="hd_id3151039">TRIM</h2>
<paragraph id="par_id3157888" role="paragraph"><ahelp hid="HID_FUNC_GLAETTEN">Removes spaces from a string, leaving only a single space character between words.</ahelp></paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionsyntax"/>
<paragraph id="par_id3151349" role="code">TRIM("Text")</paragraph>
<paragraph id="par_id3151362" role="paragraph"> <emph>Text</emph> refers to text in which spaces are to be removed.</paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionexample"/>
<paragraph id="par_id3156074" role="paragraph"> <item type="input">=TRIM(" hello      world ")</item> returns hello world without leading and trailing spaces and with single space between words.</paragraph>
</section>

<section id="unichar">
<bookmark branch="hid/SC_HID_FUNC_UNICHAR" id="bm_id0907200904004674" localize="false"/>
<bookmark branch="index" id="bm_id0907200904030935">
  <bookmark_value>UNICHAR function</bookmark_value>
</bookmark>


<h2 id="hd_id0907200904022525">UNICHAR</h2>
<paragraph id="par_id0907200904022538" role="paragraph"><ahelp hid=".">Converts a code number into a Unicode character or letter.</ahelp></paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionsyntax"/>
<paragraph id="par_id0907200904123753" role="paragraph"><item type="literal">UNICHAR(number)</item></paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionexample"/>
<paragraph id="par_id090720090412378" role="paragraph">=UNICHAR(169) returns the Copyright character <emph>©</emph>.</paragraph>
<tip id="par_id050220170755399756">See also the UNICODE() function.</tip>
</section>

<section id="unicode">
<bookmark branch="hid/SC_HID_FUNC_UNICODE" id="bm_id0907200904011330" localize="false"/>
<bookmark branch="index" id="bm_id0907200904033543">
  <bookmark_value>UNICODE function</bookmark_value>
</bookmark>


<h2 id="hd_id0907200904022588">UNICODE</h2>
<paragraph id="par_id0907200904022594" role="paragraph"><ahelp hid=".">Returns the numeric code for the first Unicode character in a text string.</ahelp></paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionsyntax"/>
<paragraph id="par_id0907200904123846" role="paragraph"><item type="literal">UNICODE("Text")</item></paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionexample"/>
<paragraph id="par_id0907200904123919" role="paragraph">=UNICODE("©") returns the Unicode number 169 for the Copyright character.</paragraph>
<tip id="par_id050220170755393174">See also the UNICHAR() function.</tip>
</section>

<section id="upper">
<bookmark branch="index" id="bm_id3145178">
  <bookmark_value>UPPER function</bookmark_value>
</bookmark>

<bookmark branch="hid/SC_HID_FUNC_GROSS" id="bm_id3145189" localize="false"/>

<h2 id="hd_id3145178">UPPER</h2>
<paragraph id="par_id3162905" role="paragraph"><ahelp hid="HID_FUNC_GROSS">Converts the string specified in the <emph>text</emph> field to uppercase.</ahelp></paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionsyntax"/>
<paragraph id="par_id3148539" role="code">UPPER("Text")</paragraph>
<paragraph id="par_id3148496" role="paragraph"> <emph>Text</emph> refers to the lower case letters you want to convert to upper case.</paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionexample"/>
<paragraph id="par_id3146757" role="paragraph"> <item type="input">=UPPER("Good Morning")</item> returns GOOD MORNING.</paragraph>
</section>

<section id="value">
<embed href="text/scalc/01/func_value.xhp#func_value"/>
</section>

<section id="webservice">
    <embed href="text/scalc/01/func_webservice.xhp#webservicefuncheader"/>
</section>
<section id="filterxml">
    <embed href="text/scalc/01/func_webservice.xhp#filterxmlfuncheader"/>
</section>
<section id="encodeurl">
    <embed href="text/scalc/01/func_webservice.xhp#encodeurlfuncheader"/>
</section>
</sort>

<section id="relatedtopics">
<embed href="text/scalc/01/04060100.xhp#drking"/>
</section>
</body>

</helpdocument>
