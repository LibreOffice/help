<?xml version="1.0" encoding="UTF-8"?>
<helpdocument version="1.0">
<!--
 * This file is part of the LibreOffice project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * This file incorporates work covered by the following license notice:
 *
 *   Licensed to the Apache Software Foundation (ASF) under one or more
 *   contributor license agreements. See the NOTICE file distributed
 *   with this work for additional information regarding copyright
 *   ownership. The ASF licenses this file to you under the Apache
 *   License, Version 2.0 (the "License"); you may not use this file
 *   except in compliance with the License. You may obtain a copy of
 *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
-->

<meta>
  <topic id="textscalc0104060115xml" indexer="include">
    <title id="tit" xml-lang="en-US">Add-in Functions, List of Analysis Functions Part One</title>
    <filename>/text/scalc/01/04060115.xhp</filename>
  </topic>
</meta>

<body>

<bookmark xml-lang="en-US" branch="index" id="bm_id3152871">
  <bookmark_value>add-ins; analysis functions</bookmark_value>
  <bookmark_value>analysis functions</bookmark_value>
</bookmark>

<h1 id="hd_id3152871"><variable id="head_addin_analysis_one"><link href="text/scalc/01/04060115.xhp" name="Add-in Functions, List of Analysis Functions Part One">Add-in Functions, List of Analysis Functions Part One</link></variable></h1>
<note id="par_id961592361784406">The Add-in functions are supplied by the <link href="text/sbasic/shared/calc_functions.xhp" name="addinanalysis">UNO <literal>com.sun.star.sheet.addin.Analysis</literal> service</link>.</note>
<section id="howtoget">
<embed href="text/scalc/00/00000404.xhp#addinana"/>
</section>
<sort order="asc" descendant="h2">

<section id="besseli">
<bookmark xml-lang="en-US" branch="index" id="bm_id3153074">
  <bookmark_value>Bessel functions</bookmark_value>
  <bookmark_value>BESSELI function</bookmark_value>
</bookmark>

<bookmark xml-lang="en-US" branch="hid/SC_HID_AAI_FUNC_BESSELI" id="bm_id3150435" localize="false"/>

<h2 id="hd_id3153334">BESSELI</h2>
<paragraph id="par_id3153960" role="paragraph" xml-lang="en-US"><ahelp hid="HID_AAI_FUNC_BESSELI">Calculates the modified Bessel function of the first kind In(x).</ahelp></paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionsyntax"/>
<paragraph id="par_id3147295" role="code" xml-lang="en-US">BESSELI(X; N)</paragraph>
<paragraph id="par_id3151338" role="paragraph" xml-lang="en-US"> <emph>X</emph> is the value on which the function will be calculated.</paragraph>
<paragraph id="par_id3151392" role="paragraph" xml-lang="en-US"> <emph>N</emph> is a positive integer (N &gt;= 0) representing the order of the Bessel function In(x)</paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionexample"/>
<paragraph id="par_id050220171019072404" role="paragraph" xml-lang="en-US">=BESSELI(3.45, 4), returns 0.651416873060081</paragraph>
<paragraph id="par_id050220171019072953" role="paragraph" xml-lang="en-US">=BESSELI(3.45, 4.333), returns 0.651416873060081, same as above because the fractional part of N is ignored.</paragraph>
<paragraph id="par_id050220171019075086" role="paragraph" xml-lang="en-US">=BESSELI(-1, 3), returns -0.022168424924332</paragraph>
</section>

<section id="besselj">
<bookmark xml-lang="en-US" branch="index" id="bm_id161618267677640">
  <bookmark_value>BESSELJ function</bookmark_value>
</bookmark>
<bookmark xml-lang="en-US" branch="hid/SC_HID_AAI_FUNC_BESSELJ" id="bm_id3150539" localize="false"/>

<h2 id="hd_id3153027">BESSELJ</h2>
<paragraph id="par_id3153015" role="paragraph" xml-lang="en-US"><ahelp hid="HID_AAI_FUNC_BESSELJ">Calculates the Bessel function of the first kind Jn(x) (cylinder function).</ahelp></paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionsyntax"/>
<paragraph id="par_id3150032" role="code" xml-lang="en-US">BESSELJ(X; N)</paragraph>
<paragraph id="par_id3150378" role="paragraph" xml-lang="en-US"> <emph>X</emph> is the value on which the function will be calculated.</paragraph>
<paragraph id="par_id3145638" role="paragraph" xml-lang="en-US"> <emph>N</emph> is a positive integer (N &gt;= 0) representing the order of the Bessel function Jn(x)</paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionexample"/>
<paragraph id="par_id050220171019077179" role="paragraph" xml-lang="en-US">=BESSELJ(3.45, 4), returns 0.196772639864984</paragraph>
<paragraph id="par_id050220171019078280" role="paragraph" xml-lang="en-US">=BESSELJ(3.45, 4.333), returns 0.196772639864984, same as above because the fractional part of N is ignored.</paragraph>
<paragraph id="par_id050220171019079818" role="paragraph" xml-lang="en-US">=BESSELJ(-1, 3), returns -0.019563353982668</paragraph>
</section>

<section id="besselk">
<bookmark xml-lang="en-US" branch="index" id="bm_id151618267791726">
  <bookmark_value>BESSELK function</bookmark_value>
</bookmark>
<bookmark xml-lang="en-US" branch="hid/SC_HID_AAI_FUNC_BESSELK" id="bm_id3147616" localize="false"/>

<h2 id="hd_id3149946">BESSELK</h2>
<paragraph id="par_id3159122" role="paragraph" xml-lang="en-US"><ahelp hid="HID_AAI_FUNC_BESSELK">Calculates the modified Bessel function of the second kind Kn(x).</ahelp></paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionsyntax"/>
<paragraph id="par_id3149354" role="code" xml-lang="en-US">BESSELK(X; N)</paragraph>
<paragraph id="par_id3150481" role="paragraph" xml-lang="en-US"> <emph>X</emph> is the strictly positive value (X &gt; 0) on which the function will be calculated.</paragraph>
<paragraph id="par_id3150024" role="paragraph" xml-lang="en-US"> <emph>N</emph> is a positive integer (N &gt;= 0) representing the order of the Bessel function Kn(x)</paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionexample"/>
<paragraph id="par_id050220171019073898" role="paragraph" xml-lang="en-US">=BESSELK(3.45, 4), returns 0.144803466373734</paragraph>
<paragraph id="par_id050220171019079889" role="paragraph" xml-lang="en-US">=BESSELK(3.45, 4.333), returns 0.144803466373734, same as above because the fractional part of N is ignored.</paragraph>
<paragraph id="par_id050220171019076471" role="paragraph" xml-lang="en-US">=BESSELK(0, 3), returns Err:502 – invalid argument (X=0)</paragraph>
</section>

<section id="bessely">
<bookmark xml-lang="en-US" branch="index" id="bm_id201618267836525">
  <bookmark_value>BESSELY function</bookmark_value>
</bookmark>
<bookmark xml-lang="en-US" branch="hid/SC_HID_AAI_FUNC_BESSELY" id="bm_id3150461" localize="false"/>

<h2 id="hd_id3145828">BESSELY</h2>
<paragraph id="par_id3146877" role="paragraph" xml-lang="en-US"><ahelp hid="HID_AAI_FUNC_BESSELY">Calculates the Bessel function of the second kind Yn(x).</ahelp></paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionsyntax"/>
<paragraph id="par_id3148884" role="code" xml-lang="en-US">BESSELY(X; N)</paragraph>
<paragraph id="par_id3147475" role="paragraph" xml-lang="en-US"> <emph>X</emph> is the strictly positive value (X &gt; 0) on which the function will be calculated.</paragraph>
<paragraph id="par_id3147421" role="paragraph" xml-lang="en-US"> <emph>N</emph> is a positive integer (N &gt;= 0) representing the order of the Bessel function Yn(x)</paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionexample"/>
<paragraph id="par_id050220171019081114" role="paragraph" xml-lang="en-US">=BESSELY(3.45, 4), returns -0.679848116844476</paragraph>
<paragraph id="par_id050220171019081288" role="paragraph" xml-lang="en-US">=BESSELY(3.45, 4.333), returns -0.679848116844476, same as above because the fractional part of N is ignored.</paragraph>
<paragraph id="par_id050220171019082347" role="paragraph" xml-lang="en-US">=BESSELY(0, 3), returns Err:502 – invalid argument (X=0)</paragraph>
</section>

<section id="bin2dec">
<bookmark xml-lang="en-US" branch="index" id="bm_id3153034">
  <bookmark_value>BIN2DEC function</bookmark_value>
  <bookmark_value>converting;binary numbers, into decimal numbers</bookmark_value>
</bookmark>
<comment>mw added one entry</comment>
<bookmark xml-lang="en-US" branch="hid/SC_HID_AAI_FUNC_BIN2DEC" id="bm_id3151230" localize="false"/>

<h2 id="hd_id3153034">BIN2DEC</h2>
<paragraph id="par_id3144744" role="paragraph" xml-lang="en-US"><ahelp hid="HID_AAI_FUNC_BIN2DEC">The result is the number for the binary (base-2) number string entered.</ahelp></paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionsyntax"/>
<paragraph id="par_id3149726" role="code" xml-lang="en-US">BIN2DEC(Number)</paragraph>
<paragraph id="par_id3150142" role="paragraph" xml-lang="en-US"> <emph>Number</emph> is a string representing a binary (base-2) number. It can have a maximum of 10 places (bits). The most significant bit is the sign bit. Negative numbers are entered as two's complement.</paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionexample"/>
<paragraph id="par_id3145138" role="paragraph" xml-lang="en-US"><item type="input">=BIN2DEC("1100100")</item> returns 100.</paragraph>
</section>

<section id="bin2hex">
<bookmark xml-lang="en-US" branch="index" id="bm_id3149954">
  <bookmark_value>BIN2HEX function</bookmark_value>
  <bookmark_value>converting;binary numbers, into hexadecimal numbers</bookmark_value>
</bookmark>
<comment>mw added one entry</comment>
<bookmark xml-lang="en-US" branch="hid/SC_HID_AAI_FUNC_BIN2HEX" id="bm_id3149548" localize="false"/>

<h2 id="hd_id3149954">BIN2HEX</h2>
<paragraph id="par_id3148585" role="paragraph" xml-lang="en-US"><ahelp hid="HID_AAI_FUNC_BIN2HEX">The result is the string representing the number in hexadecimal form for the binary (base-2) number string entered.</ahelp></paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionsyntax"/>
<paragraph id="par_id3148753" role="code" xml-lang="en-US">BIN2HEX(Number [; Places])</paragraph>
<paragraph id="par_id3155255" role="paragraph" xml-lang="en-US"><emph>Number</emph> is a string representing a binary (base-2) number. It can have a maximum of 10 places (bits). The most significant bit is the sign bit. Negative numbers are entered as two's complement.</paragraph>
<paragraph id="par_id3150860" role="paragraph" xml-lang="en-US"><emph>Places</emph> means the number of places to be output.</paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionexample"/>
<paragraph id="par_id3149686" role="paragraph" xml-lang="en-US"><item type="input">=BIN2HEX("1100100";6)</item> returns "000064".</paragraph>
</section>

<section id="bin2oct">
<bookmark xml-lang="en-US" branch="index" id="bm_id3153332">
  <bookmark_value>BIN2OCT function</bookmark_value>
  <bookmark_value>converting;binary numbers, into octal numbers</bookmark_value>
</bookmark>
<comment>mw added one entry</comment>
<bookmark xml-lang="en-US" branch="hid/SC_HID_AAI_FUNC_BIN2OCT" id="bm_id3146848" localize="false"/>

<h2 id="hd_id3153332">BIN2OCT</h2>
<paragraph id="par_id3155951" role="paragraph" xml-lang="en-US"><ahelp hid="HID_AAI_FUNC_BIN2OCT">The result is the string representing the number in octal form for the binary (base-2) number string entered.</ahelp></paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionsyntax"/>
<paragraph id="par_id3154508" role="code" xml-lang="en-US">BIN2OCT(Number [; Places])</paragraph>
<paragraph id="par_id3153567" role="paragraph" xml-lang="en-US"><emph>Number</emph> is a string representing a binary (base-2) number. It can have a maximum of 10 places (bits). The most significant bit is the sign bit. Negative numbers are entered as two's complement.</paragraph>
<paragraph id="par_id3155929" role="paragraph" xml-lang="en-US"><emph>Places</emph> means the number of places to be output.</paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionexample"/>
<paragraph id="par_id3153733" role="paragraph" xml-lang="en-US"><item type="input">=BIN2OCT("1100100";4)</item> returns "0144".</paragraph>
</section>

<section id="delta">
<bookmark xml-lang="en-US" branch="index" id="bm_id3150014">
  <bookmark_value>DELTA function</bookmark_value>
  <bookmark_value>recognizing;equal numbers</bookmark_value>
</bookmark>
<comment>mw added one entry</comment>
<bookmark xml-lang="en-US" branch="hid/SC_HID_AAI_FUNC_DELTA" id="bm_id3149880" localize="false"/>

<h2 id="hd_id3150014">DELTA</h2>
<paragraph id="par_id3148760" role="paragraph" xml-lang="en-US"><ahelp hid="HID_AAI_FUNC_DELTA">The result is TRUE (1) if both numbers, which are delivered as an argument, are equal, otherwise it is FALSE (0).</ahelp></paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionsyntax"/>
<paragraph id="par_id3145247" role="paragraph" xml-lang="en-US">DELTA(Number1 [; Number2])</paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionexample"/>
<paragraph id="par_id3151020" role="paragraph" xml-lang="en-US"> <item type="input">=DELTA(1;2)</item> returns 0.</paragraph>
</section>

<section id="dec2bin">
<bookmark xml-lang="en-US" branch="index" id="bm_id3157971">
  <bookmark_value>DEC2BIN function</bookmark_value>
  <bookmark_value>converting;decimal numbers, into binary numbers</bookmark_value>
</bookmark>
<comment>mw added one entry</comment>
<bookmark xml-lang="en-US" branch="hid/SC_HID_AAI_FUNC_DEC2BIN" id="bm_id3148389" localize="false"/>

<h2 id="hd_id3157971">DEC2BIN</h2>
<paragraph id="par_id3153043" role="paragraph" xml-lang="en-US"><ahelp hid="HID_AAI_FUNC_DEC2BIN">The result is the string representing the number in binary (base-2) form for the number entered.</ahelp></paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionsyntax"/>
<paragraph id="par_id3150569" role="code" xml-lang="en-US">DEC2BIN(Number [; Places])</paragraph>
<paragraph id="par_id3148768" role="paragraph" xml-lang="en-US"><emph>Number</emph> is a number between -512 and 511. If Number is negative, the function returns a binary number string with 10 characters. The most significant bit is the sign bit, the other 9 bits return the value.</paragraph>
<paragraph id="par_id3149537" role="paragraph" xml-lang="en-US"><emph>Places</emph> means the number of places to be output.</paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionexample"/>
<paragraph id="par_id3150662" role="paragraph" xml-lang="en-US"><item type="input">=DEC2BIN(100;8)</item> returns "01100100".</paragraph>
</section>

<section id="dec2hex">
<bookmark xml-lang="en-US" branch="index" id="bm_id3149388">
  <bookmark_value>DEC2HEX function</bookmark_value>
  <bookmark_value>converting;decimal numbers, into hexadecimal numbers</bookmark_value>
</bookmark>
<comment>mw added one entr</comment>
<bookmark xml-lang="en-US" branch="hid/SC_HID_AAI_FUNC_DEC2HEX" id="bm_id3155513" localize="false"/>

<h2 id="hd_id3149388">DEC2HEX</h2>
<paragraph id="par_id3149030" role="paragraph" xml-lang="en-US"><ahelp hid="HID_AAI_FUNC_DEC2HEX">The result is the string representing the number in hexadecimal form for the number entered.</ahelp></paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionsyntax"/>
<paragraph id="par_id3147535" role="code" xml-lang="en-US">DEC2HEX(Number [; Places])</paragraph>
<paragraph id="par_id3152820" role="paragraph" xml-lang="en-US"><emph>Number</emph> is a number. If Number is negative, the function returns a hexadecimal number string with 10 characters (40 bits). The most significant bit is the sign bit, the other 39 bits return the value.</paragraph>
<paragraph id="par_id3153221" role="paragraph" xml-lang="en-US"><emph>Places</emph> means the number of places to be output.</paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionexample"/>
<paragraph id="par_id3150476" role="paragraph" xml-lang="en-US"><item type="input">=DEC2HEX(100;4)</item> returns "0064".</paragraph>
</section>

<section id="dec2oct">
<bookmark xml-lang="en-US" branch="index" id="bm_id3154948">
  <bookmark_value>DEC2OCT function</bookmark_value>
  <bookmark_value>converting;decimal numbers, into octal numbers</bookmark_value>
</bookmark>
<comment>mw added one entr</comment>
<bookmark xml-lang="en-US" branch="hid/SC_HID_AAI_FUNC_DEC2OCT" id="bm_id3156260" localize="false"/>

<h2 id="hd_id3154948">DEC2OCT</h2>
<paragraph id="par_id3153920" role="paragraph" xml-lang="en-US"><ahelp hid="HID_AAI_FUNC_DEC2OCT">The result is the string representing the number in octal form for the number entered.</ahelp></paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionsyntax"/>
<paragraph id="par_id3148427" role="code" xml-lang="en-US">DEC2OCT(Number [; Places])</paragraph>
<paragraph id="par_id3155991" role="paragraph" xml-lang="en-US"><emph>Number</emph> is a number. If Number is negative, the function returns an octal number string with 10 characters (30 bits). The most significant bit is the sign bit, the other 29 bits return the value.</paragraph>
<paragraph id="par_id3152587" role="paragraph" xml-lang="en-US"><emph>Places</emph> means the number of places to be output.</paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionexample"/>
<paragraph id="par_id3154317" role="paragraph" xml-lang="en-US"><item type="input">=DEC2OCT(100;4)</item> returns "0144".</paragraph>
</section>

<section id="erf">
<bookmark xml-lang="en-US" branch="index" id="bm_id3083446">
  <bookmark_value>ERF function</bookmark_value>
  <bookmark_value>Gaussian error integral</bookmark_value>
</bookmark>
<comment>mw added one entr</comment>
<bookmark xml-lang="en-US" branch="hid/SC_HID_AAI_FUNC_ERF" id="bm_id3149823" localize="false"/>

<h2 id="hd_id3083446">ERF</h2>
<paragraph id="par_id3150381" role="paragraph" xml-lang="en-US"><ahelp hid="HID_AAI_FUNC_ERF">Returns values of the Gaussian error integral.</ahelp></paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionsyntax"/>
<paragraph id="par_id3163824" role="code" xml-lang="en-US">ERF(LowerLimit [; UpperLimit])</paragraph>
<paragraph id="par_id3149715" role="paragraph" xml-lang="en-US"> <emph>LowerLimit</emph> is the lower limit of the integral.</paragraph>
<paragraph id="par_id3156294" role="paragraph" xml-lang="en-US"> <emph>UpperLimit</emph> is optional. It is the upper limit of the integral. If this value is missing, the calculation takes place between 0 and the lower limit.</paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionexample"/>
<paragraph id="par_id3152974" role="paragraph" xml-lang="en-US"> <item type="input">=ERF(0;1)</item> returns 0.842701.</paragraph>
</section>

<section id="erfdotprecise">
<bookmark xml-lang="en-US" branch="index" id="bm_id2983446">
  <bookmark_value>ERF.PRECISE function</bookmark_value>
  <bookmark_value>Gaussian error integral</bookmark_value>
</bookmark>

<bookmark xml-lang="en-US" branch="hid/SC_HID_FUNC_ERF_MS" id="bm_id2949823" localize="false"/>

<h2 id="hd_id2983446">ERF.PRECISE</h2>
<paragraph id="par_id2950381" role="paragraph" xml-lang="en-US"><ahelp hid="HID_FUNC_ERF_MS">Returns values of the Gaussian error integral between 0 and the given limit.</ahelp></paragraph>
<embed href="text/scalc/01/common_func.xhp#sectionsyntax"/>
<paragraph id="par_id2963824" role="code" xml-lang="en-US">ERF.PRECISE(LowerLimit)</paragraph>
<paragraph id="par_id2949715" role="paragraph" xml-lang="en-US"><emph>LowerLimit</emph> is the limit of the integral. The calculation takes place between 0 and this limit.</paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionexample"/>
<paragraph id="par_id2952974" role="paragraph" xml-lang="en-US"> <item type="input">=ERF.PRECISE(1)</item> returns 0.842701.</paragraph>
<embed href="text/scalc/01/common_func.xhp#sectiontechinfo"/>
<embed href="text/scalc/00/avail_release.xhp#4.3"/>
<embed href="text/scalc/01/common_func.xhp#notODFF"/>
<paragraph role="paragraph" id="par_id351640873986703" localize="false"><literal>COM.MICROSOFT.ERF.PRECISE</literal></paragraph>
</section>

<section id="erfc">
<bookmark xml-lang="en-US" branch="index" id="bm_id3145082">
  <bookmark_value>ERFC function</bookmark_value>
</bookmark>

<bookmark xml-lang="en-US" branch="hid/SC_HID_AAI_FUNC_ERFC" id="bm_id3156307" localize="false"/>

<h2 id="hd_id3145082">ERFC</h2>
<paragraph id="par_id3149453" role="paragraph" xml-lang="en-US"><ahelp hid="HID_AAI_FUNC_ERFC">Returns complementary values of the Gaussian error integral between x and infinity.</ahelp></paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionsyntax"/>
<paragraph id="par_id3153220" role="code" xml-lang="en-US">ERFC(LowerLimit)</paragraph>
<paragraph id="par_id3147620" role="paragraph" xml-lang="en-US"> <emph>LowerLimit</emph> is the lower limit of the integral</paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionexample"/>
<paragraph id="par_id3156102" role="paragraph" xml-lang="en-US"> <item type="input">=ERFC(1)</item> returns 0.157299.</paragraph>
</section>

<section id="erfcdotprecise">
<bookmark xml-lang="en-US" branch="index" id="bm_id2945082">
  <bookmark_value>ERFC.PRECISE function</bookmark_value>
</bookmark>

<bookmark xml-lang="en-US" branch="hid/SC_HID_FUNC_ERFC_MS" id="bm_id2956307" localize="false"/>

<h2 id="hd_id2945082">ERFC.PRECISE</h2>
<paragraph id="par_id2949453" role="paragraph" xml-lang="en-US"><ahelp hid="HID_FUNC_ERFC_MS">Returns complementary values of the Gaussian error integral between x and infinity.</ahelp></paragraph>
<embed href="text/scalc/01/common_func.xhp#sectionsyntax"/>
<paragraph id="par_id2953220" role="code" xml-lang="en-US">ERFC.PRECISE(LowerLimit)</paragraph>
<paragraph id="par_id2947620" role="paragraph" xml-lang="en-US"> <emph>LowerLimit</emph> is the lower limit of the integral</paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionexample"/>
<paragraph id="par_id2956102" role="paragraph" xml-lang="en-US"> <item type="input">=ERFC.PRECISE(1)</item> returns 0.157299.</paragraph>
<embed href="text/scalc/01/common_func.xhp#sectiontechinfo"/>
<embed href="text/scalc/00/avail_release.xhp#4.3"/>
<embed href="text/scalc/01/common_func.xhp#notODFF"/>
<paragraph role="paragraph" id="par_id341640853986703" localize="false"><literal>COM.MICROSOFT.ERFC.PRECISE</literal></paragraph>
</section>

<section id="gestep">
<bookmark xml-lang="en-US" branch="index" id="bm_id3152927">
  <bookmark_value>GESTEP function</bookmark_value>
  <bookmark_value>numbers;greater than or equal to</bookmark_value>
</bookmark>
<comment>mw added one entry</comment>
<bookmark xml-lang="en-US" branch="hid/SC_HID_AAI_FUNC_GESTEP" id="bm_id3151182" localize="false"/>

<h2 id="hd_id3152927">GESTEP</h2>
<paragraph id="par_id3150763" role="paragraph" xml-lang="en-US"><ahelp hid="HID_AAI_FUNC_GESTEP">The result is 1 if <item type="literal">Number</item> is greater than or equal to <item type="literal">Step</item>.</ahelp></paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionsyntax"/>
<paragraph id="par_id3145212" role="code" xml-lang="en-US">GESTEP(Number [; Step])</paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionexample"/>
<paragraph id="par_id3156132" role="paragraph" xml-lang="en-US"> <item type="input">=GESTEP(5;1)</item> returns 1.</paragraph>
</section>

<section id="hex2bin">
<bookmark xml-lang="en-US" branch="index" id="bm_id3147276">
  <bookmark_value>HEX2BIN function</bookmark_value>
  <bookmark_value>converting;hexadecimal numbers, into binary numbers</bookmark_value>
</bookmark>
<comment>mw added one entry</comment>
<bookmark xml-lang="en-US" branch="hid/SC_HID_AAI_FUNC_HEX2BIN" id="bm_id3145659" localize="false"/>

<h2 id="hd_id3147276">HEX2BIN</h2>
<paragraph id="par_id3150258" role="paragraph" xml-lang="en-US"><ahelp hid="HID_AAI_FUNC_HEX2BIN">The result is the string representing the number in binary (base-2) form for the hexadecimal number string entered.</ahelp></paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionsyntax"/>
<paragraph id="par_id3155847" role="code" xml-lang="en-US">HEX2BIN(Number [; Places])</paragraph>
<paragraph id="par_id3152810" role="paragraph" xml-lang="en-US"><emph>Number</emph> is a string that represents a hexadecimal number. It can have a maximum of 10 places. The most significant bit is the sign bit, the following bits return the value. Negative numbers are entered as two's complement.</paragraph>
<paragraph id="par_id3153758" role="paragraph" xml-lang="en-US"><emph>Places</emph> is the number of places to be output.</paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionexample"/>
<paragraph id="par_id3156002" role="paragraph" xml-lang="en-US"><item type="input">=HEX2BIN("6a";8)</item> returns "01101010".</paragraph>
</section>

<section id="hex2dec">
<bookmark xml-lang="en-US" branch="index" id="bm_id3154742">
  <bookmark_value>HEX2DEC function</bookmark_value>
  <bookmark_value>converting;hexadecimal numbers, into decimal numbers</bookmark_value>
</bookmark>
<comment>mw added one entry</comment>
<bookmark xml-lang="en-US" branch="hid/SC_HID_AAI_FUNC_HEX2DEC" id="bm_id3149978" localize="false"/>

<h2 id="hd_id3154742">HEX2DEC</h2>
<paragraph id="par_id3153626" role="paragraph" xml-lang="en-US"><ahelp hid="HID_AAI_FUNC_HEX2DEC">The result is the number for the hexadecimal number string entered.</ahelp></paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionsyntax"/>
<paragraph id="par_id3149293" role="code" xml-lang="en-US">HEX2DEC(Number)</paragraph>
<paragraph id="par_id3159176" role="paragraph" xml-lang="en-US"><emph>Number</emph> is a string that represents a hexadecimal number. It can have a maximum of 10 places. The most significant bit is the sign bit, the following bits return the value. Negative numbers are entered as two's complement.</paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionexample"/>
<paragraph id="par_id3146093" role="paragraph" xml-lang="en-US"><item type="input">=HEX2DEC("6a")</item> returns 106.</paragraph>
</section>

<section id="hex2oct">
<bookmark xml-lang="en-US" branch="index" id="bm_id3149750">
  <bookmark_value>HEX2OCT function</bookmark_value>
  <bookmark_value>converting;hexadecimal numbers, into octal numbers</bookmark_value>
</bookmark>
<comment>mw added one entry</comment>
<bookmark xml-lang="en-US" branch="hid/SC_HID_AAI_FUNC_HEX2OCT" id="bm_id3147487" localize="false"/>

<h2 id="hd_id3149750">HEX2OCT</h2>
<paragraph id="par_id3153983" role="paragraph" xml-lang="en-US"><ahelp hid="HID_AAI_FUNC_HEX2OCT">The result is the string representing the number in octal form for the hexadecimal number string entered.</ahelp></paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionsyntax"/>
<paragraph id="par_id3151170" role="code" xml-lang="en-US">HEX2OCT(Number [; Places])</paragraph>
<paragraph id="par_id3152795" role="paragraph" xml-lang="en-US"><emph>Number</emph> is a string that represents a hexadecimal number. It can have a maximum of 10 places. The most significant bit is the sign bit, the following bits return the value. Negative numbers are entered as two's complement.</paragraph>
<paragraph id="par_id3149204" role="paragraph" xml-lang="en-US"><emph>Places</emph> is the number of places to be output.</paragraph>

<embed href="text/scalc/01/common_func.xhp#sectionexample"/>
<paragraph id="par_id3159341" role="paragraph" xml-lang="en-US"><item type="input">=HEX2OCT("6a";4)</item> returns "0152".</paragraph>
</section>
</sort>

<section id="relatedtopics">
<paragraph id="par_id3155751" role="paragraph" localize="false" xml-lang="en-US"><embedvar href="text/scalc/01/04060111.xhp#head_addin"/></paragraph>
<paragraph id="par_id3145324" role="paragraph" localize="false" xml-lang="en-US"><embedvar href="text/scalc/01/04060116.xhp#head_addin_analysis_two"/></paragraph>
<paragraph id="par_id3149873" role="paragraph" localize="false" xml-lang="en-US"><embedvar href="text/scalc/01/04060110.xhp#head_text"/></paragraph>
<paragraph id="par_id260920161551025898" role="paragraph" localize="false" xml-lang="en-US"><embedvar href="text/scalc/01/04060100.xhp#drking"/></paragraph>
</section>
</body>

</helpdocument>
