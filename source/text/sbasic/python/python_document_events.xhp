<?xml version="1.0" encoding="UTF-8"?>
<helpdocument version="1.0">
    <!--
    * This file is part of the LibreOffice project.
    *
    * This Source Code Form is subject to the terms of the Mozilla Public
    * License, v. 2.0. If a copy of the MPL was not distributed with this
    * file, You can obtain one at http://mozilla.org/MPL/2.0/.
    *
    -->
   <meta>
      <topic id="text/sbasic/python/python_document_events">
         <title id="tit" xml-lang="en-US">Monitoring Document Events</title>
         <filename>/text/sbasic/python/python_document_events.xhp</filename>
      </topic>
   </meta>
   <body>
      <bookmark branch="index" id="N0526">
         <bookmark_value>Basic;Monitoring Document Events</bookmark_value>
         <bookmark_value>Python;Monitoring Document Events</bookmark_value>
         <bookmark_value>Access2Base;Console</bookmark_value>
         <bookmark_value>Access2Base;Trace</bookmark_value>
         <bookmark_value>API;document.DocumentEvent: Monitoring Document Event</bookmark_value>
         <bookmark_value>API;document.XDocumentEventBroadcaster: Monitoring Document Event</bookmark_value>
         <bookmark_value>API;document.XDocumentEventListener: Monitoring Document Event</bookmark_value>
         <bookmark_value>API;lang.EventObject: Monitoring Document Event</bookmark_value>
      </bookmark>
      <section id="pythonmonitor1">
          <h1 id="N0527"><variable id="pythonmonitor"><link href="text/sbasic/python/python_document_events.xhp" name="Monitoring Document Events">Listening to Document Events</link></variable></h1>
      <paragraph role="paragraph" id="par_id641630582314861">Listening to document events can help in the following situations:</paragraph>
      <list type="unordered">
        <listitem>
          <paragraph id="par_id431630582396327" role="listitem">Identify a new document at opening time, as opposed to existing  ones, and perform a dedicated setup.</paragraph>
        </listitem>
        <listitem>
          <paragraph id="par_id461630582396782" role="listitem">Control the processing of document save, document copy, print or mailmerge requests.</paragraph>
        </listitem>
        <listitem>
          <paragraph id="par_id631630582394790" role="listitem">Recalculate table of contents, indexes or table entries of a Writer document when document is going to be closed</paragraph>
        </listitem>
        <listitem>
          <paragraph id="par_id601630582398998" role="listitem">Import math Python packages before opening a Calc document. Release these packages when the document closes.</paragraph>
        </listitem>
      </list>
      <paragraph role="paragraph" id="N0528">Next to <link href="text/sbasic/shared/01040000.xhp" name ="assigning macros to events">assigning macros to events</link>, one can monitor events raised by %PRODUCTNAME documents. Application Programming Interface (API) broadcasters are responsible for calling event scripts. Unlike listeners that require to define all supported methods, even if unused, document monitors require only two methods next to hooked event scripts.</paragraph>
      </section>
      <h2 id="N0529">Monitoring Document Events</h2>
      <paragraph role="paragraph" id="N0530">Monitoring is illustrated herewith for Basic and Python languages using object-oriented programming. Assigning <literal>OnLoad</literal> script, to the <menuitem>Open Document</menuitem> event, suffices to initiate and terminate document event monitoring. <menuitem>Tools - Customize</menuitem> menu <menuitem>Events</menuitem> tab is used to assign either scripts.</paragraph>
      <paragraph role="paragraph" id="N0531">Intercepting events helps setting scripts pre- and post-conditions such as loading and unloading libraries or track script processing in the background. <literal>Access2Base.Trace</literal> module usage is illustrating that second context.</paragraph>
     <h3 id="N0532">With Python</h3>
      <bookmark xml-lang="en-US" branch="index" id="bm_id721622446590963">
        <bookmark_value>API;frame.Desktop: Monitoring Document Event</bookmark_value>
        <bookmark_value>API;script.provider.MasterScriptProviderFactory: Monitoring Document Event</bookmark_value>
        <bookmark_value>API;script.provider.XScript: Monitoring Document Event</bookmark_value>
      </bookmark>
      <paragraph role="paragraph" id="N0533">Events monitoring starts from object instantiation and ultimately stops when Python releases the object. Raised events are reported using <literal>Access2Base</literal> console.</paragraph>
      <note id="N0534"><literal>OnLoad</literal> and <literal>OnUnload</literal> events can be used to respectively set and unset Python programs path. They are described as <menuitem>Open document</menuitem> and <menuitem>Document closed</menuitem>.</note>
      <pycode>
         <paragraph role="pycode" localize="false" id="N0535"># -*- coding: utf-8 -*-</paragraph>
         <paragraph role="pycode" localize="false" id="N0536">from __future__ import unicode_literals</paragraph>
         <paragraph role="pycode" localize="false" id="N0537">    </paragraph>
         <paragraph role="pycode" localize="false" id="N0538">import os.path, uno, unohelper</paragraph>
         <paragraph role="pycode" localize="false" id="N0539">from com.sun.star.document import DocumentEvent, \</paragraph>
         <paragraph role="pycode" localize="false" id="N0540">    XDocumentEventListener as AdapterPattern</paragraph>
         <paragraph role="pycode" localize="false" id="N0541">from com.sun.star.lang import EventObject</paragraph>
         <paragraph role="pycode" localize="false" id="N0542">    </paragraph>
         <paragraph role="pycode" localize="false" id="N0543">class UiDocument(unohelper.Base, AdapterPattern):</paragraph>
         <paragraph role="pycode" xml-lang="en-US" id="N0544">    &quot;&quot;&quot; Monitor document events &quot;&quot;&quot;</paragraph>
         <paragraph role="pycode" localize="false" id="N0545">    &apos;&apos;&apos;</paragraph>
         <paragraph role="pycode" xml-lang="en-US" id="N0546">    adapted from &apos;Python script to monitor OnSave event&apos; at</paragraph>
         <paragraph role="pycode" localize="false" id="N0547">    https://forum.openoffice.org/en/forum/viewtopic.php?t=68887</paragraph>
         <paragraph role="pycode" localize="false" id="N0548">    &apos;&apos;&apos;</paragraph>
         <paragraph role="pycode" localize="false" id="N0549">    def __init__(self):</paragraph>
         <paragraph role="pycode" xml-lang="en-US" id="N0550">        &quot;&quot;&quot; Document events monitor &quot;&quot;&quot;</paragraph>
         <paragraph role="pycode" xml-lang="en-US" id="N0551">        &apos;&apos;&apos; report using Access2Base.Trace console OR</paragraph>
         <paragraph role="pycode" xml-lang="en-US" id="N0552">        report in 1st sheet, 1st column for Calc docs &apos;&apos;&apos;</paragraph>
         <paragraph role="pycode" localize="false" id="N0553">        ctx = uno.getComponentContext()</paragraph>
         <paragraph role="pycode" localize="false" id="N0554">        smgr = ctx.getServiceManager()</paragraph>
         <paragraph role="pycode" localize="false" id="N0555">        desktop = smgr.createInstanceWithContext(</paragraph>
         <paragraph role="pycode" localize="false" id="N0556">        &apos;com.sun.star.frame.Desktop&apos; , ctx)</paragraph>
         <paragraph role="pycode" localize="false" id="N0557">        self.doc = desktop.CurrentComponent</paragraph>
         <paragraph role="pycode" xml-lang="en-US" id="N0558">        #self.row = 0  # uncomment for Calc documents only</paragraph>
         <paragraph role="pycode" localize="false" id="N0559">        Console.setLevel(&quot;DEBUG&quot;)</paragraph>
         <paragraph role="pycode" xml-lang="en-US" id="N0560">        self.listen()  # Start monitoring doc. events</paragraph>
         <paragraph role="pycode" localize="false" id="N0562">    </paragraph>
         <paragraph role="pycode" localize="false" id="N0563">    @property</paragraph>
         <paragraph role="pycode" localize="false" id="N0564">    def Filename(self) -&gt; str:</paragraph>
         <paragraph role="pycode" localize="false" id="N0565">        sys_filename = uno.fileUrlToSystemPath(self.doc.URL)</paragraph>
         <paragraph role="pycode" localize="false" id="N0566">        return os.path.basename(sys_filename)</paragraph>
         <paragraph role="pycode" localize="false" id="N0567">    </paragraph>
         <paragraph role="pycode" localize="false" id="N0568">    def setCell(self, calcDoc, txt: str):</paragraph>
         <paragraph role="pycode" xml-lang="en-US" id="N0569">        &quot;&quot;&quot; Output doc. events on 1st column of a Calc spreadsheet &quot;&quot;&quot;</paragraph>
         <paragraph role="pycode" localize="false" id="N0570">        sheet = calcDoc.getSheets().getByIndex(0)</paragraph>
         <paragraph role="pycode" localize="false" id="N0571">        sheet.getCellByPosition(0,self.row).setString(txt)</paragraph>
         <paragraph role="pycode" localize="false" id="N0572">        self.row = self.row + 1</paragraph>
         <paragraph role="pycode" localize="false" id="N0574">    </paragraph>
         <paragraph role="pycode" xml-lang="en-US" id="N0575">    def listen(self, *args):  # OnLoad/OnNew at the earliest</paragraph>
         <paragraph role="pycode" xml-lang="en-US" id="N0576">        &quot;&quot;&quot; Start doc. events monitoring &quot;&quot;&quot;</paragraph>
         <paragraph role="pycode" localize="false" id="N0577">        self.doc.addDocumentEventListener(self)</paragraph>
         <paragraph role="pycode" xml-lang="en-US" id="N0578">        Console.log(&quot;INFO&quot;, &quot;Document events are being logged&quot;, True)</paragraph>
         <paragraph role="pycode" localize="false" id="N0579">    </paragraph>
         <paragraph role="pycode" xml-lang="en-US" id="N0580">    def sleep(self, *args):  # OnUnload at the latest (optional)</paragraph>
         <paragraph role="pycode" xml-lang="en-US" id="N0581">        &quot;&quot;&quot; Stop doc. events monitoring &quot;&quot;&quot;</paragraph>
         <paragraph role="pycode" localize="false" id="N0582">        self.doc.removeDocumentEventListener(self)</paragraph>
         <paragraph role="pycode" xml-lang="en-US" id="N0583">        Console.log(&quot;INFO&quot;, &quot;Document events have been logged&quot;, True)</paragraph>
         <paragraph role="pycode" localize="false" id="N0585">    </paragraph>
         <paragraph role="pycode" localize="false" id="N0586">    def documentEventOccured(self, event: DocumentEvent):</paragraph>
         <paragraph role="pycode" xml-lang="en-US" id="N0587">        &quot;&quot;&quot; Intercepts all doc. events &quot;&quot;&quot;</paragraph>
         <paragraph role="pycode" xml-lang="en-US" id="N0588">        #self.setCell(event.Source, event.EventName) # only for Calc docs</paragraph>
         <paragraph role="pycode" localize="false" id="N0589">        Console.log(&quot;DEBUG&quot;,</paragraph>
         <paragraph role="pycode" localize="false" id="N0590">            event.EventName+&quot; in &quot;+self.Filename,</paragraph>
         <paragraph role="pycode" localize="false" id="N0591">            False)</paragraph>
         <paragraph role="pycode" localize="false" id="N0593">    </paragraph>
         <paragraph role="pycode" localize="false" id="N0594">    def disposing(self, event: EventObject):</paragraph>
         <paragraph role="pycode" xml-lang="en-US" id="N0595">        &quot;&quot;&quot; Release all activities &quot;&quot;&quot;</paragraph>
         <paragraph role="pycode" localize="false" id="N0596">        self.sleep()</paragraph>
         <paragraph role="pycode" localize="false" id="N0597">        Console.show()</paragraph>
         <paragraph role="pycode" localize="false" id="N0599">    </paragraph>
         <paragraph role="pycode" xml-lang="en-US" id="N0601">def OnLoad(*args):  # &apos;Open Document&apos; event</paragraph>
         <paragraph role="pycode" xml-lang="en-US" id="N0602">    listener = UiDocument()  # Initiates listening</paragraph>
         <paragraph role="pycode" localize="false" id="N0603">    </paragraph>
         <paragraph role="pycode" xml-lang="en-US" id="N0604">def OnUnload(*args):  # &apos;Document has been closed&apos; event</paragraph>
         <paragraph role="pycode" xml-lang="en-US" id="N0605">    pass  # (optional) performed when disposed</paragraph>
         <paragraph role="pycode" localize="false" id="N0606">    </paragraph>
         <paragraph role="pycode" localize="false" id="N0607">g_exportedScripts = (OnLoad,)</paragraph>
         <paragraph role="pycode" localize="false" id="N0609">    </paragraph>
         <paragraph role="pycode" localize="false" id="N0610">from com.sun.star.script.provider import XScript</paragraph>
         <paragraph role="pycode" localize="false" id="N0611">class Console():</paragraph>
         <paragraph role="pycode" localize="false" id="N0612">    &quot;&quot;&quot;</paragraph>
         <paragraph role="pycode" xml-lang="en-US" id="N0613">    (Back/Fore)ground console to report/log program execution.</paragraph>
         <paragraph role="pycode" localize="false" id="N0614">    &quot;&quot;&quot;</paragraph>
         <paragraph role="pycode" localize="false" id="N0615">    @staticmethod</paragraph>
         <paragraph role="pycode" localize="false" id="N0616">    def trace(*args,**kwargs):</paragraph>
         <paragraph role="pycode" xml-lang="en-US" id="N0617">        &quot;&quot;&quot; Print free item list to console &quot;&quot;&quot;</paragraph>
         <paragraph role="pycode" localize="false" id="N0618">        scr = Console._a2bScript(script=&apos;DebugPrint&apos;, module=&apos;Compatible&apos;)</paragraph>
         <paragraph role="pycode" localize="false" id="N0619">        scr.invoke((args),(),())</paragraph>
         <paragraph role="pycode" localize="false" id="N0620">    @staticmethod</paragraph>
         <paragraph role="pycode" localize="false" id="N0621">    def log(level: str, text: str, msgBox=False):</paragraph>
         <paragraph role="pycode" xml-lang="en-US" id="N0622">        &quot;&quot;&quot; Append log message to console, optional user prompt &quot;&quot;&quot;</paragraph>
         <paragraph role="pycode" localize="false" id="N0623">        scr = Console._a2bScript(script=&apos;TraceLog&apos;)</paragraph>
         <paragraph role="pycode" localize="false" id="N0624">        scr.invoke((level,text,msgBox),(),())</paragraph>
         <paragraph role="pycode" localize="false" id="N0625">    @staticmethod</paragraph>
         <paragraph role="pycode" localize="false" id="N0626">    def setLevel(logLevel: str):</paragraph>
         <paragraph role="pycode" xml-lang="en-US" id="N0627">        &quot;&quot;&quot; Set log messages lower limit &quot;&quot;&quot;</paragraph>
         <paragraph role="pycode" localize="false" id="N0628">        scr = Console._a2bScript(script=&apos;TraceLevel&apos;)</paragraph>
         <paragraph role="pycode" localize="false" id="N0629">        scr.invoke((logLevel,),(),())</paragraph>
         <paragraph role="pycode" localize="false" id="N0630">    @staticmethod</paragraph>
         <paragraph role="pycode" localize="false" id="N0631">    def show():</paragraph>
         <paragraph role="pycode" xml-lang="en-US" id="N0632">        &quot;&quot;&quot; Display console content/dialog &quot;&quot;&quot;</paragraph>
         <paragraph role="pycode" localize="false" id="N0633">        scr = Console._a2bScript(script=&apos;TraceConsole&apos;)</paragraph>
         <paragraph role="pycode" localize="false" id="N0634">        scr.invoke((),(),())</paragraph>
         <paragraph role="pycode" localize="false" id="N0635">    @staticmethod</paragraph>
         <paragraph role="pycode" localize="false" id="N0636">    def _a2bScript(script: str, library=&apos;Access2Base&apos;,</paragraph>
         <paragraph role="pycode" localize="false" id="N0637">        module=&apos;Trace&apos;) -&gt; XScript:</paragraph>
         <paragraph role="pycode" xml-lang="en-US" id="N0638">        &apos;&apos;&apos; Grab application-based Basic script &apos;&apos;&apos;</paragraph>
         <paragraph role="pycode" localize="false" id="N0639">        sm = uno.getComponentContext().ServiceManager</paragraph>
         <paragraph role="pycode" localize="false" id="N0640">        mspf = sm.createInstanceWithContext(</paragraph>
         <paragraph role="pycode" localize="false" id="N0641">            &quot;com.sun.star.script.provider.MasterScriptProviderFactory&quot;,</paragraph>
         <paragraph role="pycode" localize="false" id="N0642">            uno.getComponentContext())</paragraph>
         <paragraph role="pycode" localize="false" id="N0643">        scriptPro = mspf.createScriptProvider(&quot;&quot;)</paragraph>
         <paragraph role="pycode" localize="false" id="N0644">        scriptName = &quot;vnd.sun.star.script:&quot;+library+&quot;.&quot;+module+&quot;.&quot;+script+&quot;?language=Basic&amp;location=application&quot;</paragraph>
         <paragraph role="pycode" localize="false" id="N0645">        xScript = scriptPro.getScript(scriptName)</paragraph>
         <paragraph role="pycode" localize="false" id="N0646">        return xScript</paragraph>
      </pycode>
      <warning id="N0647">Mind the misspelled <literal>documentEventOccured</literal> method that inherits a typo from %PRODUCTNAME Application Programming Interface (API).</warning>
      <paragraph role="tip" id="N0648"><menuitem>Start application</menuitem> and <menuitem>Close application</menuitem> events can respectively be used to set and to unset Python path for user scripts or %PRODUCTNAME scripts. In a similar fashion, document based Python libraries or modules can be loaded and released using <menuitem>Open document</menuitem> and <menuitem>Document closed</menuitem> events. Refer to <link href="text/sbasic/python/python_import.xhp" name ="Importing Python Modules">Importing Python Modules</link> for more information.</paragraph>
     <h3 id="N0649">With %PRODUCTNAME Basic</h3>
      <bookmark xml-lang="en-US" branch="index" id="bm_id591622446367707">
        <bookmark_value>API;GlobalScope.BasicLibraries</bookmark_value>
        <bookmark_value>Tools;Strings</bookmark_value>
      </bookmark>
      <paragraph role="paragraph" id="N0650">Using <menuitem>Tools - Customize</menuitem> menu <menuitem>Events</menuitem> tab, the <menuitem>Open document</menuitem> event fires a <literal>ConsoleLogger</literal> initialisation. <literal>_documentEventOccured</literal> routine - set by <literal>ConsoleLogger</literal> - serves as a unique entry point to trap all document events.</paragraph>
      <h4 id="hd_id421630510141729">controller.Events module</h4>
      <bascode>
        <paragraph role="bascode" localize="false" id="bas_id591630567376295">Option Explicit</paragraph>
        <paragraph role="bascode" localize="false" id="bas_id101630567377583"></paragraph>
        <paragraph role="bascode" xml-lang="en-US" id="bas_id431630567378062">Global _obj As Object &apos; controller.ConsoleLogger instance</paragraph>
        <paragraph role="bascode" localize="false" id="bas_id971630567378798"></paragraph>
        <paragraph role="bascode" xml-lang="en-US" id="N0655">Sub OnLoad(evt As com.sun.star.document.DocumentEvent) &apos; &gt;&gt; Open Document &lt;&lt;</paragraph>
        <paragraph role="bascode" localize="false" id="N0656">    _obj = New ConsoleLogger : _obj.StartAdapter(evt)</paragraph>
        <paragraph role="bascode" localize="false" id="N0657">End Sub &apos; controller.OnLoad</paragraph>
        <paragraph role="bascode" localize="false" id="bas_id201630509594858">Sub _documentEventOccured(evt As com.sun.star.document.DocumentEvent)</paragraph>
        <paragraph role="bascode" xml-lang="en-US" id="bas_id371630509596674">    ''' ConsoleLogger unique entry point '''</paragraph>
        <paragraph role="bascode" localize="false" id="bas_id551630509597227">     _obj.DocumentEventOccurs(evt)</paragraph>
        <paragraph role="bascode" localize="false" id="bas_id511630509597425">End Sub ' controller._documentEventOccured</paragraph>
      </bascode>
      <h4 id="hd_id721630511986813">controller.ConsoleLogger class module</h4>
      <paragraph role="paragraph" id="par_id901630509435225">Events monitoring starts from the moment a <literal>ConsoleLogger</literal> object is instantiated and ultimately stops upon document closure. <literal>StartAdapter</literal> routine loads necessary Basic libraries, while caught events are reported using <literal>Access2Base.Trace</literal> module.</paragraph>
      <bascode>
          <paragraph role="bascode" localize="false" id="N0660">Option Explicit</paragraph>
          <paragraph role="bascode" localize="false" id="N0661">Option Compatible</paragraph>
          <paragraph role="bascode" localize="false" id="N0662">Option ClassModule</paragraph>
          <paragraph role="bascode" localize="false" id="N0663">    </paragraph>
          <paragraph role="bascode" xml-lang="en-US" id="N0664">&apos; ADAPTER design pattern object to be instantiated in the "Open Document" event</paragraph>
          <paragraph role="bascode" localize="false" id="N0665">Private Const UI_PROMPT = True</paragraph>
          <paragraph role="bascode" xml-lang="en-US" id="N0666">Private Const UI_NOPROMPT = False &apos; Set it to True to visualise documents events</paragraph>
          <paragraph role="bascode" localize="false" id="N0667">    </paragraph>
          <paragraph role="bascode" xml-lang="en-US" id="N0674">&apos; MEMBERS</paragraph>
          <paragraph role="bascode" localize="false" id="N0675">Private _evtAdapter As Object &apos; com.sun.star.document.XDocumentEventBroadcaster</paragraph>
          <paragraph role="bascode" xml-lang="en-US" id="bas_id131630510956418">Private _txtMsg As String ' text message to log in console</paragraph>
          <paragraph role="bascode" localize="false" id="N0676">    </paragraph>
          <paragraph role="bascode" xml-lang="en-US" id="N0677">&apos; PROPERTIES</paragraph>
          <paragraph role="bascode" localize="false" id="N0678">Private Property Get FileName As String</paragraph>
          <paragraph role="bascode" xml-lang="en-US" id="N0679">    &apos;&apos;&apos; System-dependent filename &apos;&apos;&apos;</paragraph>
          <paragraph role="bascode" localize="false" id="N0680">    Const _LIBRARY = &quot;Tools&quot; : With GlobalScope.BasicLibraries</paragraph>
          <paragraph role="bascode" localize="false" id="N0681">        If Not .IsLibraryLoaded(_LIBRARY) Then .LoadLibrary(_LIBRARY)</paragraph>
          <paragraph role="bascode" localize="false" id="N0682">    End With</paragraph>
          <paragraph role="bascode" localize="false" id="N0683">    Filename = Tools.Strings.FilenameOutofPath(ThisComponent.URL)</paragraph>
          <paragraph role="bascode" localize="false" id="N0684">End Property &apos; controller.ConsoleLogger.Filename</paragraph>
          <paragraph role="bascode" localize="false" id="N0685">    </paragraph>
          <paragraph role="bascode" xml-lang="en-US" id="N0686">&apos; METHODS</paragraph>
          <paragraph role="bascode" localize="false" id="N0687">Public Sub DocumentEventOccurs(evt As com.sun.star.document.DocumentEvent)</paragraph>
          <paragraph role="bascode" xml-lang="en-US" id="N0688">    &apos;&apos;&apos; Monitor document events &apos;&apos;&apos;</paragraph>
          <paragraph role="bascode" localize="false" id="N0689">    Access2Base.Trace.TraceLog(&quot;DEBUG&quot;, _</paragraph>
          <paragraph role="bascode" localize="false" id="N0690">        evt.EventName &amp;&quot; in &quot;&amp; Filename(evt.Source.URL), _</paragraph>
          <paragraph role="bascode" localize="false" id="N0691">        UI_NOPROMPT)</paragraph>
          <paragraph role="bascode" localize="false" id="N0692">    Select Case evt.EventName</paragraph>
          <paragraph role="bascode" localize="false" id="N0693">        Case &quot;OnUnload&quot; : _StopAdapter(evt)</paragraph>
          <paragraph role="bascode" localize="false" id="N0694">    End Select</paragraph>
          <paragraph role="bascode" localize="false" id="N0695">End Sub &apos; controller.ConsoleLogger.DocumentEventOccurs</paragraph>
          <paragraph role="bascode" localize="false" id="N0696">    </paragraph>
          <paragraph role="bascode" localize="false" id="N0700">Public Sub StartAdapter(Optional evt As com.sun.star.document.DocumentEvent)</paragraph>
          <paragraph role="bascode" xml-lang="en-US" id="N0701">    &apos;&apos;&apos; Initialize document events logging &apos;&apos;&apos;</paragraph>
          <paragraph role="bascode" localize="false" id="N0702">    Const _LIBRARY = &quot;Access2Base&quot; : With GlobalScope.BasicLibraries</paragraph>
          <paragraph role="bascode" localize="false" id="N0703">        If Not .IsLibraryLoaded(_LIBRARY) Then .LoadLibrary(_LIBRARY)</paragraph>
          <paragraph role="bascode" localize="false" id="N0704">    End With : Access2Base.Trace.TraceLevel(&quot;DEBUG&quot;)</paragraph>
          <paragraph role="bascode" localize="false" id="bas_id211630511166427">    If IsMissing(evt) Then _txtMsg = "" Else _txtMsg = evt.EventName &amp; "-"</paragraph>
          <paragraph role="bascode" xml-lang="en-US" id="N0705">    Access2Base.Trace.TraceLog("INFO", _txtMsg &amp; "Document events are being logged", UI_PROMPT)</paragraph>
          <paragraph role="bascode" localize="false" id="N0709">    _evtAdapter = CreateUnoListener( &quot;_&quot;, &quot;com.sun.star.document.XDocumentEventListener&quot; )</paragraph>
          <paragraph role="bascode" localize="false" id="N0710">    ThisComponent.addDocumentEventListener( _evtAdapter )</paragraph>
          <paragraph role="bascode" localize="false" id="N0711">End Sub &apos; controller.ConsoleLogger.StartAdapter</paragraph>
          <paragraph role="bascode" localize="false" id="N0712">    </paragraph>
          <paragraph role="bascode" localize="false" id="N0713">Private Sub _StopAdapter(Optional evt As com.sun.star.document.DocumentEvent)</paragraph>
          <paragraph role="bascode" xml-lang="en-US" id="N0714">    &apos;&apos;&apos; Terminate document events logging &apos;&apos;&apos;</paragraph>
          <paragraph role="bascode" localize="false" id="N0715">    ThisComponent.removeDocumentEventListener( _evtAdapter )</paragraph>
          <paragraph role="bascode" localize="false" id="N0716">    If IsMissing(evt) Then _txtMsg = "" Else _txtMsg = evt.EventName &amp; "-"</paragraph>
          <paragraph role="bascode" xml-lang="en-US" id="N0717">    Access2Base.Trace.TraceLog("INFO", _txtMsg &amp; "Document events have been logged", UI_PROMPT)</paragraph>
          <paragraph role="bascode" xml-lang="en-US" id="N0719">    Access2Base.Trace.TraceConsole() &apos; Captured events dialog</paragraph>
          <paragraph role="bascode" localize="false" id="N0720">End Sub &apos; controller.ConsoleLogger._StopAdapter</paragraph>
          <paragraph role="bascode" localize="false" id="N0721">    </paragraph>
          <paragraph role="bascode" xml-lang="en-US" id="N0722">&apos; EVENTS</paragraph>
          <paragraph role="bascode" xml-lang="en-US" id="N0723">&apos; Your code for handled events goes here</paragraph>
      </bascode>
      <warning id="N0724">Mind the misspelled <literal>_documentEventOccured</literal> method that inherits a typo from %PRODUCTNAME Application Programming Interface (API).</warning>
     <h2 id="N0725">Discovering Documents Events</h2>
        <bookmark xml-lang="en-US" branch="index" id="bm_id681622445958242">
           <bookmark_value>API;frame.GlobalEventBroadcaster: Monitoring Document Event</bookmark_value>
        </bookmark>
      <paragraph role="paragraph" id="N0726">The broadcaster API object provides the list of events it is responsible for:</paragraph>
      <h3 id="N0727">With Python</h3>
      <pycode>
         <paragraph role="pycode" localize="false" id="N0728"># -*- coding: utf-8 -*-</paragraph>
         <paragraph role="pycode" localize="false" id="N0729">from __future__ import unicode_literals</paragraph>
         <paragraph role="pycode" localize="false" id="N0730">    </paragraph>
         <paragraph role="pycode" localize="false" id="N0731">import uno, apso_utils as ui</paragraph>
         <paragraph role="pycode" localize="false" id="N0732">    </paragraph>
         <paragraph role="pycode" localize="false" id="N0733">def displayAvailableEvents():</paragraph>
         <paragraph role="pycode" xml-lang="en-US" id="N0734">    &quot;&quot;&quot; Display document events &quot;&quot;&quot;</paragraph>
         <paragraph role="pycode" localize="false" id="N0735">    &apos;&apos;&apos;</paragraph>
         <paragraph role="pycode" xml-lang="en-US" id="N0736">    adapted from DisplayAvailableEvents() by A. Pitonyak</paragraph>
         <paragraph role="pycode" localize="false" id="N0737">    https://forum.openoffice.org/en/forum/viewtopic.php?&amp;t=43689</paragraph>
         <paragraph role="pycode" localize="false" id="N0738">    &apos;&apos;&apos;</paragraph>
         <paragraph role="pycode" localize="false" id="N0739">    ctx = XSCRIPTCONTEXT.getComponentContext()</paragraph>
         <paragraph role="pycode" localize="false" id="N0740">    smgr = ctx.ServiceManager</paragraph>
         <paragraph role="pycode" localize="false" id="N0741">    geb = smgr.createInstanceWithContext(</paragraph>
         <paragraph role="pycode" localize="false" id="N0742">        &quot;com.sun.star.frame.GlobalEventBroadcaster&quot;, ctx)</paragraph>
         <paragraph role="pycode" localize="false" id="N0743">    events = geb.Events.getElementNames()</paragraph>
         <paragraph role="pycode" localize="false" id="N0744">    ui.msgbox(&apos;; &apos;.join(events))</paragraph>
         <paragraph role="pycode" localize="false" id="N0745">    </paragraph>
         <paragraph role="pycode" localize="false" id="N0746">g_exportedScripts = (displayAvailableEvents,)</paragraph>
      </pycode>
      <note id="N0747">The <link href="https://extensions.libreoffice.org/extensions/apso-alternative-script-organizer-for-python" name ="Alternative Python Script Organizer">Alternative Python Script Organizer (APSO)</link> extension is used to render events information on screen.</note>
      <h3 id="N0748">With %PRODUCTNAME Basic</h3>
      <bascode>
         <paragraph role="bascode" localize="false" id="N0749">Sub DisplayAvailableEvents</paragraph>
         <paragraph role="bascode" xml-lang="en-US" id="N0750">    &apos;&apos;&apos; Display document events &apos;&apos;&apos;</paragraph>
         <paragraph role="bascode" localize="false" id="N0751">    Dim geb As Object &apos; com.sun.star.frame.GlobalEventBroadcaster</paragraph>
         <paragraph role="bascode" localize="false" id="N0752">    Dim events() As String</paragraph>
         <paragraph role="bascode" localize="false" id="N0753">    geb = CreateUnoService(&quot;com.sun.star.frame.GlobalEventBroadcaster&quot;)</paragraph>
         <paragraph role="bascode" localize="false" id="N0754">    events = geb.Events.ElementNames()</paragraph>
         <paragraph role="bascode" localize="false" id="N0755">    MsgBox Join(events, &quot;; &quot;)</paragraph>
         <paragraph role="bascode" localize="false" id="N0756">End Sub</paragraph>
      </bascode>
      <section id="relatedtopics" >
         <embed href="text/sbasic/python/python_listener.xhp#pythonlistener"/>
         <embed href="text/sbasic/python/python_import.xhp#pythonimporth1"/>
         <embed href="text/sbasic/python/python_handler.xhp#pythonhandler_h1"/>
         <embed href="text/sbasic/python/python_examples.xhp#pythonexamples2"/>
         <embed href="text/sbasic/python/python_programming.xhp#pythonprogrammingheading"/>
         <embed href="text/sbasic/python/python_2_basic.xhp#py2ba_h1"/>
      </section>
   </body>
</helpdocument>