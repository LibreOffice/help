<?xml version="1.0" encoding="UTF-8"?>
<helpdocument version="1.0">
    <!--
    * This file is part of the LibreOffice project.
    *
    * This Source Code Form is subject to the terms of the Mozilla Public
    * License, v. 2.0. If a copy of the MPL was not distributed with this
    * file, You can obtain one at http://mozilla.org/MPL/2.0/.
    *
    -->
   <meta>
      <topic id="text/sbasic/python/Python_Programming">
         <title id="tit" xml-lang="en-US">Python : Programming with Python</title>
         <filename>/text.sbasic.python/Python_Programming.xhp</filename>
      </topic>
   </meta>
   <body>
      <bookmark branch="index" id="N0218">
         <bookmark_value>Python;Programming</bookmark_value>
         <bookmark_value>XSCRIPTCONTEXT;Python</bookmark_value>
         <bookmark_value>uno.py</bookmark_value>
      </bookmark>
      <paragraph role="heading" level="1" id="N0219">Programming with Python Scripts</paragraph>
      <paragraph role="paragraph" id="N0220">A Python macro is a function within a .py file, identified as a module. Unlike %PRODUCTNAME Basic and its dozen of <link href="/text/sbasic/shared/uno_objects.html" name ="external">UNO objects functions or services</link>, Python macros use the <emph>XSCRIPTCONTEXT</emph> UNO single object, shared with JavaScript and Beanshell. The <emph>g_exportedScripts</emph> global tuple explicitly lists selectable macros from a module. Python modules hold autonomous code logic, and are independant from one another.</paragraph>
      <paragraph role="heading" level="2" id="N0221">XSCRIPTCONTEXT global variable</paragraph>
      <paragraph role="paragraph" id="N0222">Genuine Basic UNO facilities can be infered from XSCRIPTCONTEXT global variable. Refer to %PRODUCTNAME API for a complete <link href="https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1script_1_1provider_1_1XScriptContext.html" name ="external">description of XSCRIPTCONTEXT</link>. XSCRIPTCONTEXT methods summarize as:</paragraph>
      <table  id="N0223">
         <tablerow>
            <tablecell>
               <paragraph role="paragraph" id="N0224">
                  <emph>Methods</emph>
               </paragraph>
            </tablecell>
            <tablecell>
               <paragraph role="paragraph" id="N0225">
                  <emph>Description</emph>
               </paragraph>
            </tablecell>
            <tablecell>
               <paragraph role="paragraph" id="N0226">
                  <emph>mapped in Basic as</emph>
               </paragraph>
            </tablecell>
         </tablerow>
         <tablerow>
            <tablecell>
               <paragraph role="paragraph" id="N0227">
                  getDocument()
               </paragraph>
            </tablecell>
            <tablecell>
               <paragraph role="paragraph" id="N0228">
                  The document reference on which the script can operate. 
               </paragraph>
            </tablecell>
            <tablecell>
               <paragraph role="tablecontent" id="N0229">
                  ThisComponent
               </paragraph>
            </tablecell>
         </tablerow>
         <tablerow>
            <tablecell>
               <paragraph role="tablecontent" id="N0230">
                  getDesktop()
               </paragraph>
            </tablecell>
            <tablecell>
               <paragraph role="tablecontent" id="N0231">
                  The desktop reference on which the script can operate. 
               </paragraph>
            </tablecell>
            <tablecell>
               <paragraph role="tablecontent" id="N0232">
                  StarDesktop
               </paragraph>
            </tablecell>
         </tablerow>
         <tablerow>
            <tablecell>
               <paragraph role="tablecontent" id="N0233">
                  getComponentContext()
               </paragraph>
            </tablecell>
            <tablecell>
               <paragraph role="tablecontent" id="N0234">
                  The component context which the script can use to create other uno components. 
               </paragraph>
            </tablecell>
            <tablecell>
               <paragraph role="tablecontent" id="N0235">
                  GetDefaultContext
               </paragraph>
               <paragraph role="tablecontent" id="N0236">
                  
               </paragraph>
            </tablecell>
         </tablerow>
      </table>
      <paragraph role="paragraph" id="N0237"><emph>HelloWorld</emph> and <emph>Capitalise</emph> installation shared scripts illustrate UNO-related macros making use of <emph>XSCRIPTCONTEXT</emph> global variable.</paragraph>
      <paragraph role="tip" id="N0238">Python standard output file is not available when running Python macros from <emph>Tools</emph> â€“ <emph>Macros</emph> - <emph>Run Macro</emph>... menu. Refer to <emph>Input/Output to Screen</emph> for more information.</paragraph>
      <paragraph role="heading" level="2" id="N0239">Module import</paragraph>
      <paragraph role="warning" id="N0240">XSCRIPTCONTEXT is not provided to imported modules.</paragraph>
      <section id="PythonFileSystemImport" >
         <paragraph role="paragraph" id="N0241">%PRODUCTNAME Basic libraries contain classes, routines and variables, Python modules contain classes, functions and variables. Common pieces of reusable Python or UNO features must be stored in <link href="/text/sbasic/python/python_locations.xhp" name ="external">My macros</link> within &lt;UserProfile&gt;/Scripts/python/pythonpath. Python libraries help organise modules in order to prevent module name collisions. Import <emph>uno.py </emph>inside shared modules.</paragraph>
      </section>
      <paragraph role="paragraph" id="N0242">Genuine BASIC UNO facilities can be infered using uno.py module. Use <link href="/text/sbasic/python/python_shell.xhp" name ="external">Python interactive shell</link> to get a complete module description using dir() and help() Python commands.</paragraph>
      <table  id="N0243">
         <tablerow>
            <tablecell>
               <paragraph role="tablehead" id="N0244">
                  <emph>Functions</emph>
               </paragraph>
            </tablecell>
            <tablecell>
               <paragraph role="tablehead" id="N0245">
                  <emph>Description</emph>
               </paragraph>
            </tablecell>
            <tablecell>
               <paragraph role="tablehead" id="N0246">
                  <emph>Mapped in Basic as</emph>
               </paragraph>
            </tablecell>
         </tablerow>
         <tablerow>
            <tablecell>
               <paragraph role="tablecontent" id="N0247">
                  absolutize()
               </paragraph>
            </tablecell>
            <tablecell>
               <paragraph role="tablecontent" id="N0248">
                  Returns an absolute file url from the given urls.
               </paragraph>
            </tablecell>
            <tablecell>
               <paragraph role="tablecontent" id="N0249">
                  
               </paragraph>
            </tablecell>
         </tablerow>
         <tablerow>
            <tablecell>
               <paragraph role="tablecontent" id="N0250">
                  createUnoStruct()
               </paragraph>
            </tablecell>
            <tablecell>
               <paragraph role="tablecontent" id="N0251">
                  Creates a UNO struct or exception given by typeName.
               </paragraph>
            </tablecell>
            <tablecell>
               <paragraph role="tablecontent" id="N0252">
                  CreateUNOStruct()
               </paragraph>
            </tablecell>
         </tablerow>
         <tablerow>
            <tablecell>
               <paragraph role="tablecontent" id="N0253">
                  fileUrlToSystemPath()
               </paragraph>
            </tablecell>
            <tablecell>
               <paragraph role="tablecontent" id="N0254">
                  Returns a system path.
               </paragraph>
            </tablecell>
            <tablecell>
               <paragraph role="tablecontent" id="N0255">
                  ConvertFromURL()
               </paragraph>
            </tablecell>
         </tablerow>
         <tablerow>
            <tablecell>
               <paragraph role="tablecontent" id="N0256">
                  getClass()
               </paragraph>
            </tablecell>
            <tablecell>
               <paragraph role="tablecontent" id="N0257">
                  Returns the class of a concrete UNO exception, struct, or interface.
               </paragraph>
            </tablecell>
            <tablecell>
               <paragraph role="tablecontent" id="N0258">
                  
               </paragraph>
            </tablecell>
         </tablerow>
         <tablerow>
            <tablecell>
               <paragraph role="tablecontent" id="N0259">
                  getComponentContext()
               </paragraph>
            </tablecell>
            <tablecell>
               <paragraph role="tablecontent" id="N0260">
                  Returns the UNO component context used to initialize the Python runtime.
               </paragraph>
            </tablecell>
            <tablecell>
               <paragraph role="tablecontent" id="N0261">
                  GetDefaultContext()
               </paragraph>
            </tablecell>
         </tablerow>
         <tablerow>
            <tablecell>
               <paragraph role="tablecontent" id="N0262">
                  Enum()
               </paragraph>
               <paragraph role="tablecontent" id="N0263">
                  getConstantByName()
               </paragraph>
            </tablecell>
            <tablecell>
               <paragraph role="tablecontent" id="N0264">
                  Looks up the value of an IDL constant by giving its explicit name.
               </paragraph>
            </tablecell>
            <tablecell>
               <paragraph role="tablecontent" id="N0265">
                  cf. API constant groups
               </paragraph>
            </tablecell>
         </tablerow>
         <tablerow>
            <tablecell>
               <paragraph role="tablecontent" id="N0266">
                  isInterface()
               </paragraph>
            </tablecell>
            <tablecell>
               <paragraph role="tablecontent" id="N0267">
                  Returns True, when obj is a class of a UNO interface.
               </paragraph>
            </tablecell>
            <tablecell>
               <paragraph role="tablecontent" id="N0268">
                  
               </paragraph>
            </tablecell>
         </tablerow>
         <tablerow>
            <tablecell>
               <paragraph role="tablecontent" id="N0269">
                  systemPathToFileUrl()
               </paragraph>
            </tablecell>
            <tablecell>
               <paragraph role="tablecontent" id="N0270">
                  Returns a file URL for the given system path.
               </paragraph>
            </tablecell>
            <tablecell>
               <paragraph role="tablecontent" id="N0271">
                  ConvertToURL()
               </paragraph>
            </tablecell>
         </tablerow>
      </table>
      <paragraph role="paragraph" id="N0272"><emph>LibreLogo</emph> and <emph>TableSample</emph> installation shared scripts use <emph>uno.py</emph> module.</paragraph>
      <paragraph role="heading" level="2" id="N0273">More Python-Basic samples</paragraph>
      <table  id="N0274">
         <tablerow>
            <tablecell>
               <paragraph role="tablehead" id="N0275">
                  <emph>Python UNO</emph>
               </paragraph>
            </tablecell>
            <tablecell>
               <paragraph role="tablehead" id="N0276">
                  <emph>Basic UNO features</emph>
               </paragraph>
            </tablecell>
         </tablerow>
         <tablerow>
            <tablecell>
               <paragraph role="tablecontent" id="N0277">
                  ctx = ..getComponentContext()
               </paragraph>
               <paragraph role="tablecontent" id="N0278">
                  smgr = ctx.getServiceManager()
               </paragraph>
               <paragraph role="tablecontent" id="N0279">
                  obj = smgr.createInstanceWithContext( .. , ctx)
               </paragraph>
            </tablecell>
            <tablecell>
               <paragraph role="tablecontent" id="N0280">
                  CreateUnoService()
               </paragraph>
            </tablecell>
         </tablerow>
         <tablerow>
            <tablecell>
               <paragraph role="tablecontent" id="N0281">
                  ctx = ..getComponentContext()
               </paragraph>
               <paragraph role="tablecontent" id="N0282">
                  smgr = ctx.getServiceManager()
               </paragraph>
            </tablecell>
            <tablecell>
               <paragraph role="tablecontent" id="N0283">
                  GetProcessServiceManager()
               </paragraph>
            </tablecell>
         </tablerow>
         <tablerow>
            <tablecell>
               <paragraph role="tablecontent" id="N0284">
                  cf. Creating a Dialog
               </paragraph>
            </tablecell>
            <tablecell>
               <paragraph role="tablecontent" id="N0285">
                  CreateUnoDialog()
               </paragraph>
            </tablecell>
         </tablerow>
         <tablerow>
            <tablecell>
               <paragraph role="tablecontent" id="N0286">
                  cf. Creating a Listener
               </paragraph>
            </tablecell>
            <tablecell>
               <paragraph role="tablecontent" id="N0287">
                  CreateUnoListener()
               </paragraph>
            </tablecell>
         </tablerow>
         <tablerow>
            <tablecell>
               <paragraph role="tablecontent" id="N0288">
                  cf. UNO data types
               </paragraph>
            </tablecell>
            <tablecell>
               <paragraph role="tablecontent" id="N0289">
                  CreateUnoValue()
               </paragraph>
               <paragraph role="tablecontent" id="N0290">
                  CreateObject()
               </paragraph>
            </tablecell>
         </tablerow>
         <tablerow>
            <tablecell>
               <paragraph role="tablecontent" id="N0291">
                  
               </paragraph>
            </tablecell>
            <tablecell>
               <paragraph role="tablecontent" id="N0292">
                  EqualUnoObjects()
               </paragraph>
            </tablecell>
         </tablerow>
         <tablerow>
            <tablecell>
               <paragraph role="tablecontent" id="N0293">
                  
               </paragraph>
            </tablecell>
            <tablecell>
               <paragraph role="tablecontent" id="N0294">
                  HasUnoInterfaces()
               </paragraph>
            </tablecell>
         </tablerow>
         <tablerow>
            <tablecell>
               <paragraph role="tablecontent" id="N0295">
                  
               </paragraph>
            </tablecell>
            <tablecell>
               <paragraph role="tablecontent" id="N0296">
                  IsUnoStruct()
               </paragraph>
            </tablecell>
         </tablerow>
      </table>
      <paragraph role="heading" level="2" id="N0297">Importing an embedded Module</paragraph>
      <section id="PythonEmbeddedImport" >
         <paragraph role="paragraph" id="N0298">Similarly to %PRODUCTNAME Basic that supports browsing and dynamic loading of libraries, Python libraries can be explored and imported on demand. For more information on library containers, visit <link href="https://api.libreoffice.org/" name ="external">%PRODUCTNAME Application Programming Interface</link> (API) or download <link href="https://www.libreoffice.org/download/download/" name ="external">%PRODUCTNAME Software Development Kit</link> (SDK).</paragraph>
         <paragraph role="paragraph" id="N0299">Importing a Python document embedded module is illustrated below, exception handling is not detailed:</paragraph>
         <paragraph role="pycode">
            <paragraph role="code" id="N0300">import uno, sys</paragraph>
            <paragraph role="code" id="N0301"></paragraph>
            <paragraph role="code" id="N0302">def load_library(library_name: str, module_name=None):</paragraph>
            <paragraph role="code" id="N0303">    &quot;&quot;&quot; load library and import module</paragraph>
            <paragraph role="code" id="N0304">    </paragraph>
            <paragraph role="code" id="N0305">    Adapted from &apos;BibliothÃ¨que de fonctions&apos; by Hubert Lambert</paragraph>
            <paragraph role="code" id="N0306">    at https://forum.openoffice.org/fr/forum/viewtopic.php?p=286213&quot;&quot;&quot;</paragraph>
            <paragraph role="code" id="N0307">    doc = XSCRIPTCONTEXT.getDocument()  # current document</paragraph>
            <paragraph role="code" id="N0308">    url = uno.fileUrlToSystemPath(&apos;{}/{}/{}&apos;, \</paragraph>
            <paragraph role="code" id="N0309">        format(doc.URL, &apos;Scripts/python&apos;, library_name)  # ConvertToURL()</paragraph>
            <paragraph role="code" id="N0310">    if not url in sys.path:  # add path if necessary</paragraph>
            <paragraph role="code" id="N0311">        sys.path.insert(0, url)  # doc takes precedence</paragraph>
            <paragraph role="code" id="N0312">    if module_name:  # import if requested</paragraph>
            <paragraph role="code" id="N0313">        return zipimport.zipimporter(url).load_module(module_name)</paragraph>
            <paragraph role="code" id="N0314"></paragraph>
            <paragraph role="code" id="N0315">def import_embedded_python():</paragraph>
            <paragraph role="code" id="N0316">    ui = load_library(&quot;my_gui&quot;,&apos;screen_io&apos;)  # add &lt;lib&gt; path + import &lt;module&gt; </paragraph>
            <paragraph role="code" id="N0317">    ui.MsgBox(sys.modules.keys())</paragraph>
            <paragraph role="code" id="N0314"></paragraph>
            <paragraph role="code" id="N0319">g_exportedScripts = import_embedded_python,  # Public macros</paragraph>
         </paragraph>
      </section>
      <section id="Relatedtopics" >
         <paragraph role="paragraph" id="N0321"><link href="/text/sbasic/shared/uno_objects.xhp" name ="external">Basic UNO Objects, Functions and Services</link></paragraph>
         <paragraph role="paragraph" id="N0322"><link href="/text/sbasic/python/python_import.xhp" name ="external">Importing Modules</link></paragraph>
         <paragraph role="paragraph" id="N0323"><link href="/text/sbasic/python/python_screen.xhp" name ="external">Input/Output to Screen</link></paragraph>
      </section>
   </body>
</helpdocument>
