<?xml version="1.0" encoding="UTF-8"?>
<!--***********************************************************************
 *
 *  The Contents of this file are made available subject to the terms of
 *  either of the following licenses
 *
 *         - GNU Lesser General Public License Version 2.1
 *         - Sun Industry Standards Source License Version 1.1
 *
 *  Sun Microsystems Inc., October, 2000
 *
 *  GNU Lesser General Public License Version 2.1
 *  =============================================
 *  Copyright 2000 by Sun Microsystems, Inc.
 *  901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License version 2.1, as published by the Free Software Foundation.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *  MA  02111-1307  USA
 *
 *
 *  Sun Industry Standards Source License Version 1.1
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.1 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://www.openoffice.org/license.html.
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRUNTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRUNTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *  The Initial Developer of the Original Code is: Sun Microsystems, Inc..
 *
 *  Copyright: 2000 by Sun Microsystems, Inc.
 *
 *  All Rights Reserved.
 *
 *  Contributor(s): _______________________________________
 *
 *
 ************************************************************************-->
<helpdocument version="1.0">
<meta>
<topic id="textsbasicshared01020100xml" indexer="include" status="PUBLISH">
<title xml-lang="en-US" id="tit">Using Variables</title>
<filename>/text/sbasic/shared/01020100.xhp</filename>
</topic>
<history>
<created date="2003-10-31T00:00:00">Sun Microsystems, Inc.</created>
<lastedited date="2003-10-31T00:00:00">converted from old format - fpe</lastedited>
</history>
</meta>
<body>
  
  
  <section id="variable">
  <bookmark branch="index" xml-lang="en-US" id="bm_id3149346"><bookmark_value>names of variables</bookmark_value><bookmark_value>variables;types and names</bookmark_value></bookmark><paragraph id="hd_id3149346" role="heading" level="1" oldref="1" l10n="U" xml-lang="en-US"><link href="text/sbasic/shared/01020100.xhp" name="Using Variables">Using Variables</link></paragraph>
  <paragraph role="paragraph" id="par_id3154346" l10n="U" xml-lang="en-US" oldref="3">The following describes the basic use of variables in $[officename] Basic.</paragraph>
  </section>
  <paragraph role="heading" level="2" id="hd_id3153361" l10n="U" xml-lang="en-US" oldref="4">Naming Conventions for Variable Identifiers</paragraph>
  <paragraph xml-lang="en-US" role="paragraph" id="par_id3148797" l10n="U" oldref="5">A variable name can consist of a maximum of 255 characters. The first character of a variable name <emph>must</emph> be a letter A-Z or a-z. Numbers can also be used in a variable name, but punctuation symbols and special characters are not permitted, with exception of the underscore character ("_"). In $[officename] Basic variable identifiers are not case-sensitive. Variable names may contain spaces but must be enclosed in square brackets if they do.</paragraph>
  <paragraph role="paragraph" id="par_id3156422" l10n="U" xml-lang="en-US" oldref="6">Examples for variable identifiers:</paragraph>
  <table id="tbl_id3154685">
   
   
   
    <tablerow>
     <tablecell>
      <paragraph role="paragraph" id="par_id3163798" l10n="U" xml-lang="en-US" oldref="7">MyNumber=5</paragraph>
     </tablecell>
     <tablecell>
      <paragraph role="paragraph" id="par_id3156441" l10n="U" xml-lang="en-US" oldref="126">Correct</paragraph>
     </tablecell>
    </tablerow>
   
   <tablerow>
    <tablecell>
     <paragraph role="paragraph" id="par_id3147317" l10n="U" xml-lang="en-US" oldref="8">MyNumber5=15</paragraph>
    </tablecell>
    <tablecell>
     <paragraph role="paragraph" id="par_id3149664" l10n="U" xml-lang="en-US" oldref="127">Correct</paragraph>
    </tablecell>
   </tablerow>
   <tablerow>
    <tablecell>
     <paragraph role="paragraph" id="par_id3145364" l10n="U" xml-lang="en-US" oldref="9">MyNumber_5=20</paragraph>
    </tablecell>
    <tablecell>
     <paragraph role="paragraph" id="par_id3146119" l10n="U" xml-lang="en-US" oldref="128">Correct</paragraph>
    </tablecell>
   </tablerow>
   <tablerow>
    <tablecell>
     <paragraph role="paragraph" id="par_id3154729" l10n="U" xml-lang="en-US" oldref="10">My Number=20</paragraph>
    </tablecell>
    <tablecell>
     <paragraph role="paragraph" id="par_id3153876" l10n="U" xml-lang="en-US" oldref="11">Not valid, variable with space must be enclosed in square brackets</paragraph>
    </tablecell>
   </tablerow>
   <tablerow>
    <tablecell>
     <paragraph role="paragraph" id="par_id3147126" l10n="U" xml-lang="en-US" oldref="14">[My Number]=12</paragraph>
    </tablecell>
    <tablecell>
     <paragraph role="paragraph" id="par_id3154510" l10n="U" xml-lang="en-US" oldref="15">Correct</paragraph>
    </tablecell>
   </tablerow>
   <tablerow>
    <tablecell>
     <paragraph role="paragraph" id="par_id3153708" l10n="U" xml-lang="en-US" oldref="12">DéjàVu=25</paragraph>
    </tablecell>
    <tablecell>
     <paragraph role="paragraph" id="par_id3150330" l10n="U" xml-lang="en-US" oldref="129">Not valid, special characters are not allowed</paragraph>
    </tablecell>
   </tablerow>
   <tablerow>
    <tablecell>
     <paragraph role="paragraph" id="par_id3155443" l10n="U" xml-lang="en-US" oldref="13">5MyNumber=12</paragraph>
    </tablecell>
    <tablecell>
     <paragraph role="paragraph" id="par_id3154254" l10n="U" xml-lang="en-US" oldref="130">Not valid, variable may not begin with a number</paragraph>
    </tablecell>
   </tablerow>
   <tablerow>
    <tablecell>
     <paragraph role="paragraph" id="par_id3147345" l10n="U" xml-lang="en-US" oldref="16">Number,Mine=12</paragraph>
    </tablecell>
    <tablecell>
     <paragraph role="paragraph" id="par_id3149256" l10n="U" xml-lang="en-US" oldref="131">Not valid, punctuation marks are not allowed</paragraph>
    </tablecell>
   </tablerow>
  </table>
  <paragraph role="heading" level="2" id="hd_id3146317" l10n="U" xml-lang="en-US" oldref="17">Declaring Variables</paragraph>
  <paragraph xml-lang="en-US" role="paragraph" id="par_id3150299" l10n="U" oldref="18">In $[officename] Basic you don't need to declare variables explicitly. An variable declaration can be performed with the <emph>Dim</emph> statement. You can declare more than one variable at a time by separating the names with a comma. To define the variable type, use either a type-declaration sign after the name, or the appropriate key word. </paragraph>
  <paragraph role="paragraph" id="par_id3154118" l10n="U" xml-lang="en-US" oldref="140">Examples for variable declarations:</paragraph>
  <table id="tbl_id3154658">
   
   
   
    <tablerow>
     <tablecell>
      <paragraph role="paragraph" id="par_id3150090" l10n="U" xml-lang="en-US" oldref="19">DIM a$</paragraph>
     </tablecell>
     <tablecell>
      <paragraph role="paragraph" id="par_id3150982" l10n="U" xml-lang="en-US" oldref="132">Declares the variable "a" as a String</paragraph>
     </tablecell>
    </tablerow>
   
   <tablerow>
    <tablecell>
     <paragraph role="paragraph" id="par_id3149531" l10n="U" xml-lang="en-US" oldref="20">DIM a As String</paragraph>
    </tablecell>
    <tablecell>
     <paragraph role="paragraph" id="par_id3150343" l10n="U" xml-lang="en-US" oldref="133">Declares the variable "a" as a String</paragraph>
    </tablecell>
   </tablerow>
   <tablerow>
    <tablecell>
     <paragraph role="paragraph" id="par_id3149036" l10n="U" xml-lang="en-US" oldref="21">DIM a$, b As Integer</paragraph>
    </tablecell>
    <tablecell>
     <paragraph role="paragraph" id="par_id3155507" l10n="U" xml-lang="en-US" oldref="22">Declares one variable as a String and one as an Integer</paragraph>
    </tablecell>
   </tablerow>
  </table>
  <paragraph role="paragraph" id="par_id3150519" l10n="U" xml-lang="en-US" oldref="23">It is very important when declaring variables that you use the type-declaration character each time, even if it was used in the declaration instead of a keyword. Thus the following statements are invalid:</paragraph>
  <table id="tbl_id3155529">
   
   
   
    <tablerow>
     <tablecell>
      <paragraph role="paragraph" id="par_id3152985" l10n="U" xml-lang="en-US" oldref="24">DIM a$</paragraph>
     </tablecell>
     <tablecell>
      <paragraph role="paragraph" id="par_id3154527" l10n="U" xml-lang="en-US" oldref="134">Declares "a" as a String</paragraph>
     </tablecell>
    </tablerow>
   
   <tablerow>
    <tablecell>
     <paragraph role="paragraph" id="par_id3148599" l10n="U" xml-lang="en-US" oldref="25">a="TestString"</paragraph>
    </tablecell>
    <tablecell>
     <paragraph role="paragraph" id="par_id3153064" l10n="U" xml-lang="en-US" oldref="135">Type-declaration missing: "a$="</paragraph>
    </tablecell>
   </tablerow>
  </table>
  <paragraph role="warning" id="par_id3144770" l10n="U" xml-lang="en-US" oldref="26">Once you have declared a variable as a certain type, you cannot declare the variable under the same name again as a different type!</paragraph>
  <paragraph role="heading" level="3" id="hd_id3149331" l10n="U" xml-lang="en-US" oldref="27">Forcing Variable Declarations</paragraph>
  <paragraph role="paragraph" id="par_id3149443" l10n="U" xml-lang="en-US" oldref="28">To force declaration of variables, use the following command:</paragraph>
  <paragraph role="paragraph" id="par_id3152869" l10n="U" xml-lang="en-US" oldref="29">OPTION EXPLICIT</paragraph>
  <paragraph xml-lang="en-US" oldref="30" role="paragraph" id="par_id3155072" l10n="U">The <emph>Option Explicit</emph> statement has to be the first line in the module, before the first SUB. Generally, only arrays need to be declared explicitly. All other variables are declared according to the type-declaration character, or - if omitted - as the default type <emph>Single</emph>.</paragraph>
  <bookmark xml-lang="en-US" branch="index" id="bm_id3154614"><bookmark_value>types of variables</bookmark_value></bookmark><paragraph role="heading" level="2" id="hd_id3154614" l10n="U" xml-lang="en-US" oldref="34">Variable Types</paragraph>
  <paragraph role="paragraph" id="par_id3155383" l10n="U" xml-lang="en-US" oldref="35">$[officename] Basic supports four variable classes:</paragraph>
  <list type="unordered">
   <listitem>
    <paragraph l10n="U" role="listitem" id="par_id3153972" xml-lang="en-US" oldref="36"><emph>Numeric</emph> variables can contain number values. Some variables are used to store large or small numbers, and others are used for floating-point or fractional numbers. </paragraph>
   </listitem>
   <listitem>
    <paragraph l10n="U" role="listitem" id="par_id3159226" xml-lang="en-US" oldref="37"><emph>String</emph> variables contain character strings.</paragraph>
   </listitem>
   <listitem>
    <paragraph l10n="U" role="listitem" id="par_id3145217" xml-lang="en-US" oldref="38"><emph>Boolean</emph> variables contain either the TRUE or the FALSE value.</paragraph>
   </listitem>
   <listitem>
    <paragraph l10n="U" role="listitem" id="par_id3154762" xml-lang="en-US" oldref="39"><emph>Object</emph> variables can store objects of various types, like tables and documents within a document.</paragraph>
   </listitem>
  </list>
  <paragraph role="heading" level="3" id="hd_id3153805" l10n="U" xml-lang="en-US" oldref="40">Integer Variables</paragraph>
  <paragraph role="paragraph" id="par_id3146966" l10n="U" xml-lang="en-US" oldref="41">Integer variables range from -32768 to 32767. If you assign a floating-point value to an integer variable, the decimal places are rounded to the next integer. Integer variables are rapidly calculated in procedures and are suitable for counter variables in loops. An integer variable only requires two bytes of memory. "%" is the type-declaration character.</paragraph>
  <paragraph role="paragraph" id="par_id3153810" l10n="U" xml-lang="en-US" oldref="43">Dim Variable%</paragraph>
  <paragraph role="paragraph" id="par_id3153556" l10n="U" xml-lang="en-US" oldref="44">Dim Variable As Integer</paragraph>
  <paragraph role="heading" level="3" id="hd_id3147546" l10n="U" xml-lang="en-US" oldref="45">Long Integer Variables</paragraph>
  <paragraph role="paragraph" id="par_id3151193" l10n="U" xml-lang="en-US" oldref="46">Long integer variables range from -2147483648 to 2147483647. If you assign a floating-point value to a long integer variable, the decimal places are rounded to the next integer. Long integer variables are rapidly calculated in procedures and are suitable for counter variables in loops for large values. A long integer variable requires four bytes of memory. "&amp;" is the type-declaration character.</paragraph>
  <paragraph role="paragraph" id="par_id3154708" l10n="U" xml-lang="en-US" oldref="48">Dim Variable&amp;</paragraph>
  <paragraph role="paragraph" id="par_id3156365" l10n="U" xml-lang="en-US" oldref="49">Dim Variable as Long</paragraph>
  <paragraph role="heading" level="3" id="hd_id3147500" l10n="U" xml-lang="en-US" oldref="50">Single Variables</paragraph>
  <paragraph role="paragraph" id="par_id3153070" l10n="U" xml-lang="en-US" oldref="51">Single variables can take positive or negative values ranging from 3.402823 x 10E38 to 1.401298 x 10E-45. Single variables are floating-point variables, in which the decimal precision decreases as the non-decimal part of the number increases. Single variables are suitable for mathematical calculations of average precision. Calculations require more time than for Integer variables, but are faster than calculations with Double variables. A Single variable requires 4 bytes of memory. The type-declaration character is  "!".</paragraph>
  <paragraph role="paragraph" id="par_id3149875" l10n="U" xml-lang="en-US" oldref="52">Dim Variable!</paragraph>
  <paragraph role="paragraph" id="par_id3153302" l10n="U" xml-lang="en-US" oldref="53">Dim Variable as Single</paragraph>
  <paragraph role="heading" level="3" id="hd_id3155753" l10n="U" xml-lang="en-US" oldref="54">Double Variables</paragraph>
  <paragraph role="paragraph" id="par_id3150953" l10n="U" xml-lang="en-US" oldref="55">Double variables can take positive or negative values ranging from 1.79769313486232 x 10E308 to 4.94065645841247 x 10E-324. Double variables are floating-point variables, in which the decimal precision decreases as the non-decimal part of the number increases. Double variables are suitable for precise calculations. Calculations require more time than for Single variables. A Double variable requires 8 bytes of memory. The type-declaration character is  "#".</paragraph>
  <paragraph role="paragraph" id="par_id3150431" l10n="U" xml-lang="en-US" oldref="56">Dim Variable#</paragraph>
  <paragraph role="paragraph" id="par_id3154406" l10n="U" xml-lang="en-US" oldref="57">Dim Variable As Double</paragraph>
  <paragraph role="heading" level="3" id="hd_id3155747" l10n="U" xml-lang="en-US" oldref="95">Currency Variables</paragraph>
  <paragraph role="paragraph" id="par_id3153337" l10n="U" xml-lang="en-US" oldref="96">Currency variables are internally stored as 64-bit numbers (8 Bytes) and displayed as a fixed-decimal number with 15 non-decimal and 4 decimal places. The values range from -922337203685477.5808 to +922337203685477.5807. Currency variables are used to calculate currency values with a high precision. The  type-declaration character is "@".</paragraph>
  <paragraph role="paragraph" id="par_id3147296" l10n="U" xml-lang="en-US" oldref="97">Dim Variable@</paragraph>
  <paragraph role="paragraph" id="par_id3150391" l10n="U" xml-lang="en-US" oldref="98">Dim Variable As Currency</paragraph>
  <paragraph role="heading" level="3" id="hd_id3148742" l10n="U" xml-lang="en-US" oldref="58">String Variables</paragraph>
  <paragraph role="paragraph" id="par_id3151393" l10n="U" xml-lang="en-US" oldref="59">String variables can hold character strings with up to 65,535 characters. Each character is stored as the corresponding Unicode value. String variables are suitable for word processing within programs and for temporary storage of any non-printable character up to a maximum length of 64 Kbytes. The memory required for storing string variables depends on the number of characters in the variable. The type-declaration character is "$".</paragraph>
  <paragraph role="paragraph" id="par_id3166467" l10n="U" xml-lang="en-US" oldref="60">Dim Variable$</paragraph>
  <paragraph role="paragraph" id="par_id3153027" l10n="U" xml-lang="en-US" oldref="61">Dim Variable As String</paragraph>
  <paragraph role="heading" level="3" id="hd_id3150534" l10n="U" xml-lang="en-US" oldref="62">Boolean Variables</paragraph>
  <paragraph role="paragraph" id="par_id3145632" l10n="U" xml-lang="en-US" oldref="63">Boolean variables store only one of two values: TRUE or FALSE. Boolean variables are used to store binary values, like the result of a comparison and are represented internally by a 2-byte integer value. Any value assigned to a Boolean is converted to "False" if the value is not exactly equal to "-1". Boolean variables can only be declared by the key words True or False.</paragraph>
  <paragraph role="paragraph" id="par_id3147615" l10n="U" xml-lang="en-US" oldref="64">Dim Variable As Boolean</paragraph>
  <paragraph role="heading" level="3" id="hd_id3149722" l10n="U" xml-lang="en-US" oldref="65">Date Variables</paragraph>
  <paragraph l10n="U" xml-lang="en-US" role="paragraph" id="par_id3159116" oldref="66">Date variables can only contain dates and time values stored in an internal format. Values assigned to Date variables with <emph/><link href="text/sbasic/shared/03030101.xhp" name="Dateserial"><emph>Dateserial</emph><emph/></link>, <emph/><link href="text/sbasic/shared/03030102.xhp" name="Datevalue"><emph>Datevalue</emph><emph/></link>, <emph/><link href="text/sbasic/shared/03030205.xhp" name="Timeserial"><emph>Timeserial</emph><emph/></link> or <emph/><link href="text/sbasic/shared/03030206.xhp" name="Timevalue"><emph>Timevalue</emph><emph/></link> are automatically converted to the internal format. Date-variables are converted to normal numbers by using the <emph/><link href="text/sbasic/shared/03030103.xhp" name="Day"><emph>Day</emph><emph/></link>, <emph/><link href="text/sbasic/shared/03030104.xhp" name="Month"><emph>Month</emph><emph/></link>, <emph/><link href="text/sbasic/shared/03030106.xhp" name="Year"><emph>Year</emph><emph/></link> or the <emph/><link href="text/sbasic/shared/03030201.xhp" name="Hour"><emph>Hour</emph><emph/></link>, <emph/><link href="text/sbasic/shared/03030202.xhp" name="Minute"><emph>Minute</emph><emph/></link>, <emph/><link href="text/sbasic/shared/03030204.xhp" name="Second"><emph>Second</emph><emph/></link> function. The internal format enables a comparison of date/time values by calculating the difference between two numbers. These variables can only be declared with the key word <emph>Date</emph>.</paragraph>
  <paragraph role="paragraph" id="par_id3150462" l10n="U" xml-lang="en-US" oldref="67">Dim Variable As Date</paragraph>
  <paragraph role="heading" level="2" id="hd_id3148732" l10n="U" xml-lang="en-US" oldref="68">Initial Variable Values</paragraph>
  <paragraph role="paragraph" id="par_id3154549" l10n="U" xml-lang="en-US" oldref="69">As soon as the variable has been declared, it is automatically set to the "Null" value. Note the following conventions:</paragraph>
  <paragraph l10n="U" role="paragraph" id="par_id3143222" xml-lang="en-US" oldref="70"><emph>Numeric</emph> variables are automatically assigned the value "0" as soon as they are declared.</paragraph>
  <paragraph l10n="U" role="paragraph" id="par_id3150693" xml-lang="en-US" oldref="71"><emph>Date variables</emph> are assigned the value 0 internally; equivalent to converting the value to "0" with the <emph/><link href="text/sbasic/shared/03030103.xhp" name="Day"><emph>Day</emph><emph/></link>, <emph/><link href="text/sbasic/shared/03030104.xhp" name="Month"><emph>Month</emph><emph/></link>, <emph/><link href="text/sbasic/shared/03030106.xhp" name="Year"><emph>Year</emph><emph/></link> or the <emph/><link href="text/sbasic/shared/03030201.xhp" name="Hour"><emph>Hour</emph><emph/></link>, <emph/><link href="text/sbasic/shared/03030202.xhp" name="Minute"><emph>Minute</emph><emph/></link>, <emph/><link href="text/sbasic/shared/03030204.xhp" name="Second"><emph>Second</emph><emph/></link> function.</paragraph>
  <paragraph l10n="U" role="paragraph" id="par_id3154807" xml-lang="en-US" oldref="72"><emph>String variables</emph> are assigned an empty-string ("") when they are declared.</paragraph>
  <paragraph role="heading" level="2" id="hd_id3153936" l10n="U" xml-lang="en-US" oldref="83">Arrays</paragraph>
  <paragraph role="paragraph" id="par_id3148736" l10n="U" xml-lang="en-US" oldref="84">$[officename] Basic knows one- or multi-dimensional arrays, defined by a specified variable type. Arrays are suitable for editing lists and tables in programs. Individual elements of an array can be addressed through a numeric index.</paragraph>
  <paragraph xml-lang="en-US" oldref="85" role="paragraph" id="par_id3149546" l10n="U">Arrays <emph>must</emph> be declared with the <emph>Dim</emph> statement. There are several ways to define the index range of an array:</paragraph>
  <table id="tbl_id3155829">
   
   
   
    <tablerow>
     <tablecell>
      <paragraph role="paragraph" id="par_id3150143" l10n="U" xml-lang="en-US" oldref="86">DIM text$(20)</paragraph>
     </tablecell>
     <tablecell>
      <paragraph role="paragraph" id="par_id3154567" l10n="U" xml-lang="en-US" oldref="136">21 elements numbered from 0 to 20</paragraph>
     </tablecell>
    </tablerow>
   
   <tablerow>
    <tablecell>
     <paragraph role="paragraph" id="par_id3145596" l10n="U" xml-lang="en-US" oldref="125">DIM text$(5,4)</paragraph>
    </tablecell>
    <tablecell>
     <paragraph role="paragraph" id="par_id3154397" l10n="U" xml-lang="en-US" oldref="137">30 elements (a matrix of 6 x 5 elements)</paragraph>
    </tablecell>
   </tablerow>
   <tablerow>
    <tablecell>
     <paragraph role="paragraph" id="par_id3149185" l10n="U" xml-lang="en-US" oldref="87">DIM text$(5 to 25)</paragraph>
    </tablecell>
    <tablecell>
     <paragraph role="paragraph" id="par_id3149690" l10n="U" xml-lang="en-US" oldref="138">21 elements numbered from 5 to 25</paragraph>
    </tablecell>
   </tablerow>
   <tablerow>
    <tablecell>
     <paragraph role="paragraph" id="par_id3155950" l10n="U" xml-lang="en-US" oldref="88">DIM text$(-15 to 5)</paragraph>
    </tablecell>
    <tablecell>
     <paragraph role="paragraph" id="par_id3153113" l10n="U" xml-lang="en-US" oldref="89">21 elements (including 0), numbered from -15 to 5</paragraph>
    </tablecell>
   </tablerow>
  </table>
  <paragraph role="paragraph" id="par_id3153005" l10n="U" xml-lang="en-US" oldref="90">The index range can include positive as well as negative numbers. The maximum number of elements that can be addressed through an index is 16368.</paragraph>
  <paragraph role="heading" level="2" id="hd_id3154507" l10n="U" xml-lang="en-US" oldref="91">Constants</paragraph>
  <paragraph role="paragraph" id="par_id3156357" l10n="U" xml-lang="en-US" oldref="92">Constants have a fixed value. They are only defined once in the program and cannot be redefined later:</paragraph>
  <paragraph role="paragraph" id="par_id3153203" l10n="U" xml-lang="en-US" oldref="93">CONST ConstName=Expression</paragraph>
  
 </body>
</helpdocument>
