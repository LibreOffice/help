<?xml version="1.0" encoding="UTF-8"?>
<!--***********************************************************************
 *
 *  The Contents of this file are made available subject to the terms of
 *  either of the following licenses
 *
 *         - GNU Lesser General Public License Version 2.1
 *         - Sun Industry Standards Source License Version 1.1
 *
 *  Sun Microsystems Inc., October, 2000
 *
 *  GNU Lesser General Public License Version 2.1
 *  =============================================
 *  Copyright 2000 by Sun Microsystems, Inc.
 *  901 San Antonio Road, Palo Alto, CA 94303, USA
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License version 2.1, as published by the Free Software Foundation.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *  MA  02111-1307  USA
 *
 *
 *  Sun Industry Standards Source License Version 1.1
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.1 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://www.openoffice.org/license.html.
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRUNTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRUNTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *  The Initial Developer of the Original Code is: Sun Microsystems, Inc..
 *
 *  Copyright: 2000 by Sun Microsystems, Inc.
 *
 *  All Rights Reserved.
 *
 *  Contributor(s): _______________________________________
 *
 *
 ************************************************************************-->
<helpdocument version="1.0">
<meta>
<topic id="textsbasicshared03132300xml" indexer="include" status="PUBLISH">
<title xml-lang="en-US" id="tit">CreateUnoValue Function [Runtime]</title>
<filename>/text/sbasic/shared/03132300.xhp</filename>
</topic>
<history>
<created date="2003-10-31T00:00:00">Sun Microsystems, Inc.</created>
<lastedited date="2003-10-31T00:00:00">converted from old format - fpe</lastedited>
</history>
</meta>
<body>
  
  
  <section id="createunovalue">
  <bookmark xml-lang="en-US" branch="index" id="bm_id3150682"><bookmark_value>CreateUnoValue;function</bookmark_value></bookmark><paragraph id="hd_id3150682" role="heading" level="1" oldref="1" l10n="U" xml-lang="en-US"><link href="text/sbasic/shared/03132300.xhp" name="CreateUnoValue Function [Runtime]">CreateUnoValue Function [Runtime]</link></paragraph>
  <paragraph role="paragraph" id="par_id3147291" l10n="U" xml-lang="en-US" oldref="2">Returns an object that represents a strictly typed value referring to the Uno type system. </paragraph>
  </section>
  <paragraph role="paragraph" id="par_id3143267" l10n="U" xml-lang="en-US" oldref="3">This object is automatically converted to an Any of the corresponding type when passed to Uno. The type must be specified by its fully qualified Uno type name.</paragraph>
  <paragraph role="note" id="par_id3153626" l10n="U" xml-lang="en-US" oldref="4">The $[officename] API frequently uses the Any type. It is the counterpart of the Variant type known from other environments. The Any type holds one arbitrary Uno type and is used in generic Uno interfaces.</paragraph>
  <paragraph role="heading" level="2" id="hd_id3147560" l10n="U" xml-lang="en-US" oldref="5">Syntax:</paragraph>
  <paragraph role="paragraph" id="par_id3154760" l10n="U" xml-lang="en-US" oldref="6">oUnoValue = CreateUnoValue( "[]byte", MyBasicValue ) to get a byte sequence.</paragraph>
  <paragraph role="paragraph" id="par_id3150541" l10n="U" xml-lang="en-US" oldref="7">If CreateUnoValue cannot be converted to the specified Uno type, and error occurs. For the conversion, the TypeConverter service is used.</paragraph>
  <paragraph role="paragraph" id="par_id3153524" l10n="U" xml-lang="en-US" oldref="8">This function is intended for use in situations where the default Basic to Uno type converting mechanism is insufficient. This can happen when you try to access generic Any based interfaces, such as XPropertySet::setPropertyValue( Name, Value ) or X???Container::insertBy???( ???, Value ), from $[officename] Basic. The Basic runtime does not recognize these types as they are only defined in the corresponding service.</paragraph>
  <paragraph role="paragraph" id="par_id3154366" l10n="U" xml-lang="en-US" oldref="9">In this type of situation, $[officename] Basic chooses the best matching type for the Basic type that you want to convert. However, if the wrong type is selected, an error occurs. You there use the CreateUnoValue() function to create a value for the unknown Uno type.</paragraph>
  <paragraph role="paragraph" id="par_id3150769" l10n="U" xml-lang="en-US" oldref="10">You can also use this function to pass non-Any values, but this is not recommend. If Basic already knows the target type, using the CreateUnoValue() function will only lead to additional converting operations that slow down the Basic execution.</paragraph>
  
 </body>
</helpdocument>
