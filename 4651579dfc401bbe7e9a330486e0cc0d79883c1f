{
  "comments": [
    {
      "key": {
        "uuid": "22094c72_04dff8df",
        "filename": "source/text/sbasic/shared/03/sf_dictionary.xhp",
        "patchSetId": 2
      },
      "lineNbr": 49,
      "author": {
        "id": 1000521
      },
      "writtenOn": "2021-07-21T10:49:03Z",
      "side": 1,
      "message": "I believe it is important to illustrate the creation of a sf_dictionary instance in Python as a subclass of the builtin dict() class.\n\nExamples:\n            Usage:\n                dico \u003d dict(A \u003d 1, B \u003d 2, C \u003d 3)\n                myDict \u003d CreateScriptService(\u0027Dictionary\u0027, dico)    # Initialize myDict with the content of dico\n                myDict[\u0027D\u0027] \u003d 4\n                print(myDict)   # {\u0027A\u0027: 1, \u0027B\u0027: 2, \u0027C\u0027: 3, \u0027D\u0027: 4}\n                propval \u003d myDict.ConvertToPropertyValues()\n            or\n                dico \u003d dict(A \u003d 1, B \u003d 2, C \u003d 3)\n                myDict \u003d CreateScriptService(\u0027Dictionary\u0027)          # Initialize myDict as an empty dict object\n                myDict.update(dico) # Load the values of dico into myDict\n                myDict[\u0027D\u0027] \u003d 4\n                print(myDict)   # {\u0027A\u0027: 1, \u0027B\u0027: 2, \u0027C\u0027: 3, \u0027D\u0027: 4}\n                propval \u003d myDict.ConvertToPropertyValues()",
      "range": {
        "startLine": 49,
        "startChar": 2,
        "endLine": 49,
        "endChar": 343
      },
      "revId": "4651579dfc401bbe7e9a330486e0cc0d79883c1f",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "85df8a7e_828d01c4",
        "filename": "source/text/sbasic/shared/03/sf_dictionary.xhp",
        "patchSetId": 2
      },
      "lineNbr": 334,
      "author": {
        "id": 1000521
      },
      "writtenOn": "2021-07-21T10:49:03Z",
      "side": 1,
      "message": "Note that dictionary keys are not case-sensitive in Basic, whereas names are case-sensitive in sets of property values and in Python dictionaries.",
      "range": {
        "startLine": 334,
        "startChar": 271,
        "endLine": 334,
        "endChar": 381
      },
      "revId": "4651579dfc401bbe7e9a330486e0cc0d79883c1f",
      "serverId": "6622c302-437a-49ad-a91d-55ba7dcf1615",
      "unresolved": true
    }
  ]
}